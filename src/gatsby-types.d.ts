/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type API_Price = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly flatAmount: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly overagePrice: Maybe<Scalars['Float']>;
  readonly parent: Maybe<Node>;
  readonly prepaidQuantity: Maybe<Scalars['Int']>;
};

type API_PriceConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<API_PriceEdge>;
  readonly group: ReadonlyArray<API_PriceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<API_Price>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type API_PriceConnection_distinctArgs = {
  field: API_PriceFieldsEnum;
};


type API_PriceConnection_groupArgs = {
  field: API_PriceFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type API_PriceConnection_maxArgs = {
  field: API_PriceFieldsEnum;
};


type API_PriceConnection_minArgs = {
  field: API_PriceFieldsEnum;
};


type API_PriceConnection_sumArgs = {
  field: API_PriceFieldsEnum;
};

type API_PriceEdge = {
  readonly next: Maybe<API_Price>;
  readonly node: API_Price;
  readonly previous: Maybe<API_Price>;
};

type API_PriceFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'flatAmount'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'overagePrice'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prepaidQuantity';

type API_PriceFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flatAmount: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly overagePrice: InputMaybe<FloatQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prepaidQuantity: InputMaybe<IntQueryOperatorInput>;
};

type API_PriceGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<API_PriceEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<API_PriceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<API_Price>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type API_PriceGroupConnection_distinctArgs = {
  field: API_PriceFieldsEnum;
};


type API_PriceGroupConnection_groupArgs = {
  field: API_PriceFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type API_PriceGroupConnection_maxArgs = {
  field: API_PriceFieldsEnum;
};


type API_PriceGroupConnection_minArgs = {
  field: API_PriceFieldsEnum;
};


type API_PriceGroupConnection_sumArgs = {
  field: API_PriceFieldsEnum;
};

type API_PriceSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<API_PriceFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type Blocks = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type BlocksConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BlocksEdge>;
  readonly group: ReadonlyArray<BlocksGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Blocks>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BlocksConnection_distinctArgs = {
  field: BlocksFieldsEnum;
};


type BlocksConnection_groupArgs = {
  field: BlocksFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BlocksConnection_maxArgs = {
  field: BlocksFieldsEnum;
};


type BlocksConnection_minArgs = {
  field: BlocksFieldsEnum;
};


type BlocksConnection_sumArgs = {
  field: BlocksFieldsEnum;
};

type BlocksEdge = {
  readonly next: Maybe<Blocks>;
  readonly node: Blocks;
  readonly previous: Maybe<Blocks>;
};

type BlocksFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type BlocksFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type BlocksFilterListInput = {
  readonly elemMatch: InputMaybe<BlocksFilterInput>;
};

type BlocksGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<BlocksEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<BlocksGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Blocks>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type BlocksGroupConnection_distinctArgs = {
  field: BlocksFieldsEnum;
};


type BlocksGroupConnection_groupArgs = {
  field: BlocksFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type BlocksGroupConnection_maxArgs = {
  field: BlocksFieldsEnum;
};


type BlocksGroupConnection_minArgs = {
  field: BlocksFieldsEnum;
};


type BlocksGroupConnection_sumArgs = {
  field: BlocksFieldsEnum;
};

type BlocksSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<BlocksFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type BottomLink = {
  readonly text: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type BottomLinkFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type BottomLinkFilterListInput = {
  readonly elemMatch: InputMaybe<BottomLinkFilterInput>;
};

type CardSection = {
  readonly blocks: Maybe<ReadonlyArray<Maybe<Blocks>>>;
  readonly cards: Maybe<ReadonlyArray<Maybe<Cards>>>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type CardSectionFilterInput = {
  readonly blocks: InputMaybe<BlocksFilterListInput>;
  readonly cards: InputMaybe<CardsFilterListInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type Cards = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<Scalars['String']>;
  readonly icon: Maybe<File>;
  readonly iconAlt: Maybe<Scalars['String']>;
  readonly iconTitle: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type CardsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<CardsEdge>;
  readonly group: ReadonlyArray<CardsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Cards>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type CardsConnection_distinctArgs = {
  field: CardsFieldsEnum;
};


type CardsConnection_groupArgs = {
  field: CardsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type CardsConnection_maxArgs = {
  field: CardsFieldsEnum;
};


type CardsConnection_minArgs = {
  field: CardsFieldsEnum;
};


type CardsConnection_sumArgs = {
  field: CardsFieldsEnum;
};

type CardsEdge = {
  readonly next: Maybe<Cards>;
  readonly node: Cards;
  readonly previous: Maybe<Cards>;
};

type CardsFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content'
  | 'iconAlt'
  | 'iconTitle'
  | 'icon.absolutePath'
  | 'icon.accessTime'
  | 'icon.atime'
  | 'icon.atimeMs'
  | 'icon.base'
  | 'icon.birthTime'
  | 'icon.birthtime'
  | 'icon.birthtimeMs'
  | 'icon.blksize'
  | 'icon.blocks'
  | 'icon.changeTime'
  | 'icon.childImageSharp.children'
  | 'icon.childImageSharp.children.children'
  | 'icon.childImageSharp.children.id'
  | 'icon.childImageSharp.fixed.aspectRatio'
  | 'icon.childImageSharp.fixed.base64'
  | 'icon.childImageSharp.fixed.height'
  | 'icon.childImageSharp.fixed.originalName'
  | 'icon.childImageSharp.fixed.src'
  | 'icon.childImageSharp.fixed.srcSet'
  | 'icon.childImageSharp.fixed.srcSetWebp'
  | 'icon.childImageSharp.fixed.srcWebp'
  | 'icon.childImageSharp.fixed.tracedSVG'
  | 'icon.childImageSharp.fixed.width'
  | 'icon.childImageSharp.fluid.aspectRatio'
  | 'icon.childImageSharp.fluid.base64'
  | 'icon.childImageSharp.fluid.originalImg'
  | 'icon.childImageSharp.fluid.originalName'
  | 'icon.childImageSharp.fluid.presentationHeight'
  | 'icon.childImageSharp.fluid.presentationWidth'
  | 'icon.childImageSharp.fluid.sizes'
  | 'icon.childImageSharp.fluid.src'
  | 'icon.childImageSharp.fluid.srcSet'
  | 'icon.childImageSharp.fluid.srcSetWebp'
  | 'icon.childImageSharp.fluid.srcWebp'
  | 'icon.childImageSharp.fluid.tracedSVG'
  | 'icon.childImageSharp.gatsbyImageData'
  | 'icon.childImageSharp.id'
  | 'icon.childImageSharp.internal.content'
  | 'icon.childImageSharp.internal.contentDigest'
  | 'icon.childImageSharp.internal.description'
  | 'icon.childImageSharp.internal.fieldOwners'
  | 'icon.childImageSharp.internal.ignoreType'
  | 'icon.childImageSharp.internal.mediaType'
  | 'icon.childImageSharp.internal.owner'
  | 'icon.childImageSharp.internal.type'
  | 'icon.childImageSharp.original.height'
  | 'icon.childImageSharp.original.src'
  | 'icon.childImageSharp.original.width'
  | 'icon.childImageSharp.parent.children'
  | 'icon.childImageSharp.parent.id'
  | 'icon.childImageSharp.resize.aspectRatio'
  | 'icon.childImageSharp.resize.height'
  | 'icon.childImageSharp.resize.originalName'
  | 'icon.childImageSharp.resize.src'
  | 'icon.childImageSharp.resize.tracedSVG'
  | 'icon.childImageSharp.resize.width'
  | 'icon.childMarkdownRemark.children'
  | 'icon.childMarkdownRemark.children.children'
  | 'icon.childMarkdownRemark.children.id'
  | 'icon.childMarkdownRemark.excerpt'
  | 'icon.childMarkdownRemark.excerptAst'
  | 'icon.childMarkdownRemark.fields.authors'
  | 'icon.childMarkdownRemark.fields.slug'
  | 'icon.childMarkdownRemark.fields.socialCardId'
  | 'icon.childMarkdownRemark.fileAbsolutePath'
  | 'icon.childMarkdownRemark.frontmatter.authors'
  | 'icon.childMarkdownRemark.frontmatter.bio'
  | 'icon.childMarkdownRemark.frontmatter.blocks'
  | 'icon.childMarkdownRemark.frontmatter.bottomLinks'
  | 'icon.childMarkdownRemark.frontmatter.category'
  | 'icon.childMarkdownRemark.frontmatter.description'
  | 'icon.childMarkdownRemark.frontmatter.featured'
  | 'icon.childMarkdownRemark.frontmatter.funnel'
  | 'icon.childMarkdownRemark.frontmatter.industry'
  | 'icon.childMarkdownRemark.frontmatter.invertContent'
  | 'icon.childMarkdownRemark.frontmatter.isHidden'
  | 'icon.childMarkdownRemark.frontmatter.isPublished'
  | 'icon.childMarkdownRemark.frontmatter.name'
  | 'icon.childMarkdownRemark.frontmatter.publishDate'
  | 'icon.childMarkdownRemark.frontmatter.relatedTitle'
  | 'icon.childMarkdownRemark.frontmatter.role'
  | 'icon.childMarkdownRemark.frontmatter.tags'
  | 'icon.childMarkdownRemark.frontmatter.templateKey'
  | 'icon.childMarkdownRemark.frontmatter.title'
  | 'icon.childMarkdownRemark.headings'
  | 'icon.childMarkdownRemark.headings.depth'
  | 'icon.childMarkdownRemark.headings.id'
  | 'icon.childMarkdownRemark.headings.value'
  | 'icon.childMarkdownRemark.html'
  | 'icon.childMarkdownRemark.htmlAst'
  | 'icon.childMarkdownRemark.id'
  | 'icon.childMarkdownRemark.internal.content'
  | 'icon.childMarkdownRemark.internal.contentDigest'
  | 'icon.childMarkdownRemark.internal.description'
  | 'icon.childMarkdownRemark.internal.fieldOwners'
  | 'icon.childMarkdownRemark.internal.ignoreType'
  | 'icon.childMarkdownRemark.internal.mediaType'
  | 'icon.childMarkdownRemark.internal.owner'
  | 'icon.childMarkdownRemark.internal.type'
  | 'icon.childMarkdownRemark.parent.children'
  | 'icon.childMarkdownRemark.parent.id'
  | 'icon.childMarkdownRemark.rawMarkdownBody'
  | 'icon.childMarkdownRemark.socialCard.absolutePath'
  | 'icon.childMarkdownRemark.socialCard.accessTime'
  | 'icon.childMarkdownRemark.socialCard.atime'
  | 'icon.childMarkdownRemark.socialCard.atimeMs'
  | 'icon.childMarkdownRemark.socialCard.base'
  | 'icon.childMarkdownRemark.socialCard.birthTime'
  | 'icon.childMarkdownRemark.socialCard.birthtime'
  | 'icon.childMarkdownRemark.socialCard.birthtimeMs'
  | 'icon.childMarkdownRemark.socialCard.blksize'
  | 'icon.childMarkdownRemark.socialCard.blocks'
  | 'icon.childMarkdownRemark.socialCard.changeTime'
  | 'icon.childMarkdownRemark.socialCard.children'
  | 'icon.childMarkdownRemark.socialCard.childrenImageSharp'
  | 'icon.childMarkdownRemark.socialCard.childrenMarkdownRemark'
  | 'icon.childMarkdownRemark.socialCard.childrenNotificationBarYaml'
  | 'icon.childMarkdownRemark.socialCard.childrenTeamMembersYaml'
  | 'icon.childMarkdownRemark.socialCard.ctime'
  | 'icon.childMarkdownRemark.socialCard.ctimeMs'
  | 'icon.childMarkdownRemark.socialCard.dev'
  | 'icon.childMarkdownRemark.socialCard.dir'
  | 'icon.childMarkdownRemark.socialCard.ext'
  | 'icon.childMarkdownRemark.socialCard.extension'
  | 'icon.childMarkdownRemark.socialCard.gid'
  | 'icon.childMarkdownRemark.socialCard.hash'
  | 'icon.childMarkdownRemark.socialCard.id'
  | 'icon.childMarkdownRemark.socialCard.ino'
  | 'icon.childMarkdownRemark.socialCard.mode'
  | 'icon.childMarkdownRemark.socialCard.modifiedTime'
  | 'icon.childMarkdownRemark.socialCard.mtime'
  | 'icon.childMarkdownRemark.socialCard.mtimeMs'
  | 'icon.childMarkdownRemark.socialCard.name'
  | 'icon.childMarkdownRemark.socialCard.nlink'
  | 'icon.childMarkdownRemark.socialCard.prettySize'
  | 'icon.childMarkdownRemark.socialCard.publicURL'
  | 'icon.childMarkdownRemark.socialCard.rdev'
  | 'icon.childMarkdownRemark.socialCard.relativeDirectory'
  | 'icon.childMarkdownRemark.socialCard.relativePath'
  | 'icon.childMarkdownRemark.socialCard.root'
  | 'icon.childMarkdownRemark.socialCard.size'
  | 'icon.childMarkdownRemark.socialCard.sourceInstanceName'
  | 'icon.childMarkdownRemark.socialCard.uid'
  | 'icon.childMarkdownRemark.tableOfContents'
  | 'icon.childMarkdownRemark.timeToRead'
  | 'icon.childMarkdownRemark.wordCount.paragraphs'
  | 'icon.childMarkdownRemark.wordCount.sentences'
  | 'icon.childMarkdownRemark.wordCount.words'
  | 'icon.childNotificationBarYaml.arrowText'
  | 'icon.childNotificationBarYaml.backgroundColor'
  | 'icon.childNotificationBarYaml.barBody'
  | 'icon.childNotificationBarYaml.children'
  | 'icon.childNotificationBarYaml.children.children'
  | 'icon.childNotificationBarYaml.children.id'
  | 'icon.childNotificationBarYaml.id'
  | 'icon.childNotificationBarYaml.internal.content'
  | 'icon.childNotificationBarYaml.internal.contentDigest'
  | 'icon.childNotificationBarYaml.internal.description'
  | 'icon.childNotificationBarYaml.internal.fieldOwners'
  | 'icon.childNotificationBarYaml.internal.ignoreType'
  | 'icon.childNotificationBarYaml.internal.mediaType'
  | 'icon.childNotificationBarYaml.internal.owner'
  | 'icon.childNotificationBarYaml.internal.type'
  | 'icon.childNotificationBarYaml.openUrlNewTab'
  | 'icon.childNotificationBarYaml.parent.children'
  | 'icon.childNotificationBarYaml.parent.id'
  | 'icon.childNotificationBarYaml.showNotBar'
  | 'icon.childNotificationBarYaml.url'
  | 'icon.childTeamMembersYaml.children'
  | 'icon.childTeamMembersYaml.children.children'
  | 'icon.childTeamMembersYaml.children.id'
  | 'icon.childTeamMembersYaml.id'
  | 'icon.childTeamMembersYaml.internal.content'
  | 'icon.childTeamMembersYaml.internal.contentDigest'
  | 'icon.childTeamMembersYaml.internal.description'
  | 'icon.childTeamMembersYaml.internal.fieldOwners'
  | 'icon.childTeamMembersYaml.internal.ignoreType'
  | 'icon.childTeamMembersYaml.internal.mediaType'
  | 'icon.childTeamMembersYaml.internal.owner'
  | 'icon.childTeamMembersYaml.internal.type'
  | 'icon.childTeamMembersYaml.parent.children'
  | 'icon.childTeamMembersYaml.parent.id'
  | 'icon.childTeamMembersYaml.totalMembers'
  | 'icon.children'
  | 'icon.childrenImageSharp'
  | 'icon.childrenImageSharp.children'
  | 'icon.childrenImageSharp.children.children'
  | 'icon.childrenImageSharp.children.id'
  | 'icon.childrenImageSharp.fixed.aspectRatio'
  | 'icon.childrenImageSharp.fixed.base64'
  | 'icon.childrenImageSharp.fixed.height'
  | 'icon.childrenImageSharp.fixed.originalName'
  | 'icon.childrenImageSharp.fixed.src'
  | 'icon.childrenImageSharp.fixed.srcSet'
  | 'icon.childrenImageSharp.fixed.srcSetWebp'
  | 'icon.childrenImageSharp.fixed.srcWebp'
  | 'icon.childrenImageSharp.fixed.tracedSVG'
  | 'icon.childrenImageSharp.fixed.width'
  | 'icon.childrenImageSharp.fluid.aspectRatio'
  | 'icon.childrenImageSharp.fluid.base64'
  | 'icon.childrenImageSharp.fluid.originalImg'
  | 'icon.childrenImageSharp.fluid.originalName'
  | 'icon.childrenImageSharp.fluid.presentationHeight'
  | 'icon.childrenImageSharp.fluid.presentationWidth'
  | 'icon.childrenImageSharp.fluid.sizes'
  | 'icon.childrenImageSharp.fluid.src'
  | 'icon.childrenImageSharp.fluid.srcSet'
  | 'icon.childrenImageSharp.fluid.srcSetWebp'
  | 'icon.childrenImageSharp.fluid.srcWebp'
  | 'icon.childrenImageSharp.fluid.tracedSVG'
  | 'icon.childrenImageSharp.gatsbyImageData'
  | 'icon.childrenImageSharp.id'
  | 'icon.childrenImageSharp.internal.content'
  | 'icon.childrenImageSharp.internal.contentDigest'
  | 'icon.childrenImageSharp.internal.description'
  | 'icon.childrenImageSharp.internal.fieldOwners'
  | 'icon.childrenImageSharp.internal.ignoreType'
  | 'icon.childrenImageSharp.internal.mediaType'
  | 'icon.childrenImageSharp.internal.owner'
  | 'icon.childrenImageSharp.internal.type'
  | 'icon.childrenImageSharp.original.height'
  | 'icon.childrenImageSharp.original.src'
  | 'icon.childrenImageSharp.original.width'
  | 'icon.childrenImageSharp.parent.children'
  | 'icon.childrenImageSharp.parent.id'
  | 'icon.childrenImageSharp.resize.aspectRatio'
  | 'icon.childrenImageSharp.resize.height'
  | 'icon.childrenImageSharp.resize.originalName'
  | 'icon.childrenImageSharp.resize.src'
  | 'icon.childrenImageSharp.resize.tracedSVG'
  | 'icon.childrenImageSharp.resize.width'
  | 'icon.childrenMarkdownRemark'
  | 'icon.childrenMarkdownRemark.children'
  | 'icon.childrenMarkdownRemark.children.children'
  | 'icon.childrenMarkdownRemark.children.id'
  | 'icon.childrenMarkdownRemark.excerpt'
  | 'icon.childrenMarkdownRemark.excerptAst'
  | 'icon.childrenMarkdownRemark.fields.authors'
  | 'icon.childrenMarkdownRemark.fields.slug'
  | 'icon.childrenMarkdownRemark.fields.socialCardId'
  | 'icon.childrenMarkdownRemark.fileAbsolutePath'
  | 'icon.childrenMarkdownRemark.frontmatter.authors'
  | 'icon.childrenMarkdownRemark.frontmatter.bio'
  | 'icon.childrenMarkdownRemark.frontmatter.blocks'
  | 'icon.childrenMarkdownRemark.frontmatter.bottomLinks'
  | 'icon.childrenMarkdownRemark.frontmatter.category'
  | 'icon.childrenMarkdownRemark.frontmatter.description'
  | 'icon.childrenMarkdownRemark.frontmatter.featured'
  | 'icon.childrenMarkdownRemark.frontmatter.funnel'
  | 'icon.childrenMarkdownRemark.frontmatter.industry'
  | 'icon.childrenMarkdownRemark.frontmatter.invertContent'
  | 'icon.childrenMarkdownRemark.frontmatter.isHidden'
  | 'icon.childrenMarkdownRemark.frontmatter.isPublished'
  | 'icon.childrenMarkdownRemark.frontmatter.name'
  | 'icon.childrenMarkdownRemark.frontmatter.publishDate'
  | 'icon.childrenMarkdownRemark.frontmatter.relatedTitle'
  | 'icon.childrenMarkdownRemark.frontmatter.role'
  | 'icon.childrenMarkdownRemark.frontmatter.tags'
  | 'icon.childrenMarkdownRemark.frontmatter.templateKey'
  | 'icon.childrenMarkdownRemark.frontmatter.title'
  | 'icon.childrenMarkdownRemark.headings'
  | 'icon.childrenMarkdownRemark.headings.depth'
  | 'icon.childrenMarkdownRemark.headings.id'
  | 'icon.childrenMarkdownRemark.headings.value'
  | 'icon.childrenMarkdownRemark.html'
  | 'icon.childrenMarkdownRemark.htmlAst'
  | 'icon.childrenMarkdownRemark.id'
  | 'icon.childrenMarkdownRemark.internal.content'
  | 'icon.childrenMarkdownRemark.internal.contentDigest'
  | 'icon.childrenMarkdownRemark.internal.description'
  | 'icon.childrenMarkdownRemark.internal.fieldOwners'
  | 'icon.childrenMarkdownRemark.internal.ignoreType'
  | 'icon.childrenMarkdownRemark.internal.mediaType'
  | 'icon.childrenMarkdownRemark.internal.owner'
  | 'icon.childrenMarkdownRemark.internal.type'
  | 'icon.childrenMarkdownRemark.parent.children'
  | 'icon.childrenMarkdownRemark.parent.id'
  | 'icon.childrenMarkdownRemark.rawMarkdownBody'
  | 'icon.childrenMarkdownRemark.socialCard.absolutePath'
  | 'icon.childrenMarkdownRemark.socialCard.accessTime'
  | 'icon.childrenMarkdownRemark.socialCard.atime'
  | 'icon.childrenMarkdownRemark.socialCard.atimeMs'
  | 'icon.childrenMarkdownRemark.socialCard.base'
  | 'icon.childrenMarkdownRemark.socialCard.birthTime'
  | 'icon.childrenMarkdownRemark.socialCard.birthtime'
  | 'icon.childrenMarkdownRemark.socialCard.birthtimeMs'
  | 'icon.childrenMarkdownRemark.socialCard.blksize'
  | 'icon.childrenMarkdownRemark.socialCard.blocks'
  | 'icon.childrenMarkdownRemark.socialCard.changeTime'
  | 'icon.childrenMarkdownRemark.socialCard.children'
  | 'icon.childrenMarkdownRemark.socialCard.childrenImageSharp'
  | 'icon.childrenMarkdownRemark.socialCard.childrenMarkdownRemark'
  | 'icon.childrenMarkdownRemark.socialCard.childrenNotificationBarYaml'
  | 'icon.childrenMarkdownRemark.socialCard.childrenTeamMembersYaml'
  | 'icon.childrenMarkdownRemark.socialCard.ctime'
  | 'icon.childrenMarkdownRemark.socialCard.ctimeMs'
  | 'icon.childrenMarkdownRemark.socialCard.dev'
  | 'icon.childrenMarkdownRemark.socialCard.dir'
  | 'icon.childrenMarkdownRemark.socialCard.ext'
  | 'icon.childrenMarkdownRemark.socialCard.extension'
  | 'icon.childrenMarkdownRemark.socialCard.gid'
  | 'icon.childrenMarkdownRemark.socialCard.hash'
  | 'icon.childrenMarkdownRemark.socialCard.id'
  | 'icon.childrenMarkdownRemark.socialCard.ino'
  | 'icon.childrenMarkdownRemark.socialCard.mode'
  | 'icon.childrenMarkdownRemark.socialCard.modifiedTime'
  | 'icon.childrenMarkdownRemark.socialCard.mtime'
  | 'icon.childrenMarkdownRemark.socialCard.mtimeMs'
  | 'icon.childrenMarkdownRemark.socialCard.name'
  | 'icon.childrenMarkdownRemark.socialCard.nlink'
  | 'icon.childrenMarkdownRemark.socialCard.prettySize'
  | 'icon.childrenMarkdownRemark.socialCard.publicURL'
  | 'icon.childrenMarkdownRemark.socialCard.rdev'
  | 'icon.childrenMarkdownRemark.socialCard.relativeDirectory'
  | 'icon.childrenMarkdownRemark.socialCard.relativePath'
  | 'icon.childrenMarkdownRemark.socialCard.root'
  | 'icon.childrenMarkdownRemark.socialCard.size'
  | 'icon.childrenMarkdownRemark.socialCard.sourceInstanceName'
  | 'icon.childrenMarkdownRemark.socialCard.uid'
  | 'icon.childrenMarkdownRemark.tableOfContents'
  | 'icon.childrenMarkdownRemark.timeToRead'
  | 'icon.childrenMarkdownRemark.wordCount.paragraphs'
  | 'icon.childrenMarkdownRemark.wordCount.sentences'
  | 'icon.childrenMarkdownRemark.wordCount.words'
  | 'icon.childrenNotificationBarYaml'
  | 'icon.childrenNotificationBarYaml.arrowText'
  | 'icon.childrenNotificationBarYaml.backgroundColor'
  | 'icon.childrenNotificationBarYaml.barBody'
  | 'icon.childrenNotificationBarYaml.children'
  | 'icon.childrenNotificationBarYaml.children.children'
  | 'icon.childrenNotificationBarYaml.children.id'
  | 'icon.childrenNotificationBarYaml.id'
  | 'icon.childrenNotificationBarYaml.internal.content'
  | 'icon.childrenNotificationBarYaml.internal.contentDigest'
  | 'icon.childrenNotificationBarYaml.internal.description'
  | 'icon.childrenNotificationBarYaml.internal.fieldOwners'
  | 'icon.childrenNotificationBarYaml.internal.ignoreType'
  | 'icon.childrenNotificationBarYaml.internal.mediaType'
  | 'icon.childrenNotificationBarYaml.internal.owner'
  | 'icon.childrenNotificationBarYaml.internal.type'
  | 'icon.childrenNotificationBarYaml.openUrlNewTab'
  | 'icon.childrenNotificationBarYaml.parent.children'
  | 'icon.childrenNotificationBarYaml.parent.id'
  | 'icon.childrenNotificationBarYaml.showNotBar'
  | 'icon.childrenNotificationBarYaml.url'
  | 'icon.childrenTeamMembersYaml'
  | 'icon.childrenTeamMembersYaml.children'
  | 'icon.childrenTeamMembersYaml.children.children'
  | 'icon.childrenTeamMembersYaml.children.id'
  | 'icon.childrenTeamMembersYaml.id'
  | 'icon.childrenTeamMembersYaml.internal.content'
  | 'icon.childrenTeamMembersYaml.internal.contentDigest'
  | 'icon.childrenTeamMembersYaml.internal.description'
  | 'icon.childrenTeamMembersYaml.internal.fieldOwners'
  | 'icon.childrenTeamMembersYaml.internal.ignoreType'
  | 'icon.childrenTeamMembersYaml.internal.mediaType'
  | 'icon.childrenTeamMembersYaml.internal.owner'
  | 'icon.childrenTeamMembersYaml.internal.type'
  | 'icon.childrenTeamMembersYaml.parent.children'
  | 'icon.childrenTeamMembersYaml.parent.id'
  | 'icon.childrenTeamMembersYaml.totalMembers'
  | 'icon.children.children'
  | 'icon.children.children.children'
  | 'icon.children.children.id'
  | 'icon.children.id'
  | 'icon.children.internal.content'
  | 'icon.children.internal.contentDigest'
  | 'icon.children.internal.description'
  | 'icon.children.internal.fieldOwners'
  | 'icon.children.internal.ignoreType'
  | 'icon.children.internal.mediaType'
  | 'icon.children.internal.owner'
  | 'icon.children.internal.type'
  | 'icon.children.parent.children'
  | 'icon.children.parent.id'
  | 'icon.ctime'
  | 'icon.ctimeMs'
  | 'icon.dev'
  | 'icon.dir'
  | 'icon.ext'
  | 'icon.extension'
  | 'icon.gid'
  | 'icon.hash'
  | 'icon.id'
  | 'icon.ino'
  | 'icon.internal.content'
  | 'icon.internal.contentDigest'
  | 'icon.internal.description'
  | 'icon.internal.fieldOwners'
  | 'icon.internal.ignoreType'
  | 'icon.internal.mediaType'
  | 'icon.internal.owner'
  | 'icon.internal.type'
  | 'icon.mode'
  | 'icon.modifiedTime'
  | 'icon.mtime'
  | 'icon.mtimeMs'
  | 'icon.name'
  | 'icon.nlink'
  | 'icon.parent.children'
  | 'icon.parent.children.children'
  | 'icon.parent.children.id'
  | 'icon.parent.id'
  | 'icon.parent.internal.content'
  | 'icon.parent.internal.contentDigest'
  | 'icon.parent.internal.description'
  | 'icon.parent.internal.fieldOwners'
  | 'icon.parent.internal.ignoreType'
  | 'icon.parent.internal.mediaType'
  | 'icon.parent.internal.owner'
  | 'icon.parent.internal.type'
  | 'icon.parent.parent.children'
  | 'icon.parent.parent.id'
  | 'icon.prettySize'
  | 'icon.publicURL'
  | 'icon.rdev'
  | 'icon.relativeDirectory'
  | 'icon.relativePath'
  | 'icon.root'
  | 'icon.size'
  | 'icon.sourceInstanceName'
  | 'icon.uid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'title';

type CardsFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<FileFilterInput>;
  readonly iconAlt: InputMaybe<StringQueryOperatorInput>;
  readonly iconTitle: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type CardsFilterListInput = {
  readonly elemMatch: InputMaybe<CardsFilterInput>;
};

type CardsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<CardsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<CardsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Cards>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type CardsGroupConnection_distinctArgs = {
  field: CardsFieldsEnum;
};


type CardsGroupConnection_groupArgs = {
  field: CardsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type CardsGroupConnection_maxArgs = {
  field: CardsFieldsEnum;
};


type CardsGroupConnection_minArgs = {
  field: CardsFieldsEnum;
};


type CardsGroupConnection_sumArgs = {
  field: CardsFieldsEnum;
};

type CardsSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<CardsFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'changeTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldsEnum;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldsEnum;
};

type DirectorySortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<DirectoryFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  /** Returns the first child node of type NotificationBarYaml or null if there are no children of given type on this node */
  readonly childNotificationBarYaml: Maybe<NotificationBarYaml>;
  /** Returns the first child node of type TeamMembersYaml or null if there are no children of given type on this node */
  readonly childTeamMembersYaml: Maybe<TeamMembersYaml>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  /** Returns all children nodes filtered by type NotificationBarYaml */
  readonly childrenNotificationBarYaml: Maybe<ReadonlyArray<Maybe<NotificationBarYaml>>>;
  /** Returns all children nodes filtered by type TeamMembersYaml */
  readonly childrenTeamMembersYaml: Maybe<ReadonlyArray<Maybe<TeamMembersYaml>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly hash: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldsEnum =
  | 'absolutePath'
  | 'accessTime'
  | 'atime'
  | 'atimeMs'
  | 'base'
  | 'birthTime'
  | 'birthtime'
  | 'birthtimeMs'
  | 'blksize'
  | 'blocks'
  | 'changeTime'
  | 'childImageSharp.children'
  | 'childImageSharp.children.children'
  | 'childImageSharp.children.children.children'
  | 'childImageSharp.children.children.id'
  | 'childImageSharp.children.id'
  | 'childImageSharp.children.internal.content'
  | 'childImageSharp.children.internal.contentDigest'
  | 'childImageSharp.children.internal.description'
  | 'childImageSharp.children.internal.fieldOwners'
  | 'childImageSharp.children.internal.ignoreType'
  | 'childImageSharp.children.internal.mediaType'
  | 'childImageSharp.children.internal.owner'
  | 'childImageSharp.children.internal.type'
  | 'childImageSharp.children.parent.children'
  | 'childImageSharp.children.parent.id'
  | 'childImageSharp.fixed.aspectRatio'
  | 'childImageSharp.fixed.base64'
  | 'childImageSharp.fixed.height'
  | 'childImageSharp.fixed.originalName'
  | 'childImageSharp.fixed.src'
  | 'childImageSharp.fixed.srcSet'
  | 'childImageSharp.fixed.srcSetWebp'
  | 'childImageSharp.fixed.srcWebp'
  | 'childImageSharp.fixed.tracedSVG'
  | 'childImageSharp.fixed.width'
  | 'childImageSharp.fluid.aspectRatio'
  | 'childImageSharp.fluid.base64'
  | 'childImageSharp.fluid.originalImg'
  | 'childImageSharp.fluid.originalName'
  | 'childImageSharp.fluid.presentationHeight'
  | 'childImageSharp.fluid.presentationWidth'
  | 'childImageSharp.fluid.sizes'
  | 'childImageSharp.fluid.src'
  | 'childImageSharp.fluid.srcSet'
  | 'childImageSharp.fluid.srcSetWebp'
  | 'childImageSharp.fluid.srcWebp'
  | 'childImageSharp.fluid.tracedSVG'
  | 'childImageSharp.gatsbyImageData'
  | 'childImageSharp.id'
  | 'childImageSharp.internal.content'
  | 'childImageSharp.internal.contentDigest'
  | 'childImageSharp.internal.description'
  | 'childImageSharp.internal.fieldOwners'
  | 'childImageSharp.internal.ignoreType'
  | 'childImageSharp.internal.mediaType'
  | 'childImageSharp.internal.owner'
  | 'childImageSharp.internal.type'
  | 'childImageSharp.original.height'
  | 'childImageSharp.original.src'
  | 'childImageSharp.original.width'
  | 'childImageSharp.parent.children'
  | 'childImageSharp.parent.children.children'
  | 'childImageSharp.parent.children.id'
  | 'childImageSharp.parent.id'
  | 'childImageSharp.parent.internal.content'
  | 'childImageSharp.parent.internal.contentDigest'
  | 'childImageSharp.parent.internal.description'
  | 'childImageSharp.parent.internal.fieldOwners'
  | 'childImageSharp.parent.internal.ignoreType'
  | 'childImageSharp.parent.internal.mediaType'
  | 'childImageSharp.parent.internal.owner'
  | 'childImageSharp.parent.internal.type'
  | 'childImageSharp.parent.parent.children'
  | 'childImageSharp.parent.parent.id'
  | 'childImageSharp.resize.aspectRatio'
  | 'childImageSharp.resize.height'
  | 'childImageSharp.resize.originalName'
  | 'childImageSharp.resize.src'
  | 'childImageSharp.resize.tracedSVG'
  | 'childImageSharp.resize.width'
  | 'childMarkdownRemark.children'
  | 'childMarkdownRemark.children.children'
  | 'childMarkdownRemark.children.children.children'
  | 'childMarkdownRemark.children.children.id'
  | 'childMarkdownRemark.children.id'
  | 'childMarkdownRemark.children.internal.content'
  | 'childMarkdownRemark.children.internal.contentDigest'
  | 'childMarkdownRemark.children.internal.description'
  | 'childMarkdownRemark.children.internal.fieldOwners'
  | 'childMarkdownRemark.children.internal.ignoreType'
  | 'childMarkdownRemark.children.internal.mediaType'
  | 'childMarkdownRemark.children.internal.owner'
  | 'childMarkdownRemark.children.internal.type'
  | 'childMarkdownRemark.children.parent.children'
  | 'childMarkdownRemark.children.parent.id'
  | 'childMarkdownRemark.excerpt'
  | 'childMarkdownRemark.excerptAst'
  | 'childMarkdownRemark.fields.authors'
  | 'childMarkdownRemark.fields.authors.excerpt'
  | 'childMarkdownRemark.fields.authors.fileAbsolutePath'
  | 'childMarkdownRemark.fields.authors.id'
  | 'childMarkdownRemark.fields.authors.parent'
  | 'childMarkdownRemark.fields.authors.rawMarkdownBody'
  | 'childMarkdownRemark.fields.slug'
  | 'childMarkdownRemark.fields.socialCardId'
  | 'childMarkdownRemark.fileAbsolutePath'
  | 'childMarkdownRemark.frontmatter.authors'
  | 'childMarkdownRemark.frontmatter.bio'
  | 'childMarkdownRemark.frontmatter.blocks'
  | 'childMarkdownRemark.frontmatter.blocks.content'
  | 'childMarkdownRemark.frontmatter.blocks.ctaText'
  | 'childMarkdownRemark.frontmatter.blocks.ctaUrl'
  | 'childMarkdownRemark.frontmatter.blocks.imageAlt'
  | 'childMarkdownRemark.frontmatter.blocks.imageTitle'
  | 'childMarkdownRemark.frontmatter.blocks.isCtaButton'
  | 'childMarkdownRemark.frontmatter.blocks.isImageAfterText'
  | 'childMarkdownRemark.frontmatter.blocks.subheader'
  | 'childMarkdownRemark.frontmatter.bottomLinks'
  | 'childMarkdownRemark.frontmatter.bottomLinks.text'
  | 'childMarkdownRemark.frontmatter.bottomLinks.url'
  | 'childMarkdownRemark.frontmatter.cardSection.blocks'
  | 'childMarkdownRemark.frontmatter.cardSection.cards'
  | 'childMarkdownRemark.frontmatter.cardSection.subtitle'
  | 'childMarkdownRemark.frontmatter.cardSection.title'
  | 'childMarkdownRemark.frontmatter.category'
  | 'childMarkdownRemark.frontmatter.customCTA.ctaText'
  | 'childMarkdownRemark.frontmatter.customCTA.ctaUrl'
  | 'childMarkdownRemark.frontmatter.customCTA.description'
  | 'childMarkdownRemark.frontmatter.customCTA.isPublished'
  | 'childMarkdownRemark.frontmatter.customCTA.openCtaNewTab'
  | 'childMarkdownRemark.frontmatter.customCTA.title'
  | 'childMarkdownRemark.frontmatter.description'
  | 'childMarkdownRemark.frontmatter.featured'
  | 'childMarkdownRemark.frontmatter.footer.ctaSubtitle'
  | 'childMarkdownRemark.frontmatter.footer.ctaTitle'
  | 'childMarkdownRemark.frontmatter.funnel'
  | 'childMarkdownRemark.frontmatter.header.content'
  | 'childMarkdownRemark.frontmatter.header.subLabel'
  | 'childMarkdownRemark.frontmatter.header.subTitle'
  | 'childMarkdownRemark.frontmatter.heroImage.imageAlt'
  | 'childMarkdownRemark.frontmatter.heroImage.imageTitle'
  | 'childMarkdownRemark.frontmatter.hero.ctaHref'
  | 'childMarkdownRemark.frontmatter.hero.ctaText'
  | 'childMarkdownRemark.frontmatter.hero.description'
  | 'childMarkdownRemark.frontmatter.hero.openCtaNewTab'
  | 'childMarkdownRemark.frontmatter.hero.title'
  | 'childMarkdownRemark.frontmatter.industry'
  | 'childMarkdownRemark.frontmatter.inlineCta.buttonHref'
  | 'childMarkdownRemark.frontmatter.inlineCta.buttonText'
  | 'childMarkdownRemark.frontmatter.inlineCta.subtitle'
  | 'childMarkdownRemark.frontmatter.inlineCta.title'
  | 'childMarkdownRemark.frontmatter.invertContent'
  | 'childMarkdownRemark.frontmatter.isHidden'
  | 'childMarkdownRemark.frontmatter.isPublished'
  | 'childMarkdownRemark.frontmatter.metadata.description'
  | 'childMarkdownRemark.frontmatter.metadata.imageAlt'
  | 'childMarkdownRemark.frontmatter.metadata.imageTitle'
  | 'childMarkdownRemark.frontmatter.metadata.title'
  | 'childMarkdownRemark.frontmatter.metadata.url'
  | 'childMarkdownRemark.frontmatter.name'
  | 'childMarkdownRemark.frontmatter.photo.absolutePath'
  | 'childMarkdownRemark.frontmatter.photo.accessTime'
  | 'childMarkdownRemark.frontmatter.photo.atime'
  | 'childMarkdownRemark.frontmatter.photo.atimeMs'
  | 'childMarkdownRemark.frontmatter.photo.base'
  | 'childMarkdownRemark.frontmatter.photo.birthTime'
  | 'childMarkdownRemark.frontmatter.photo.birthtime'
  | 'childMarkdownRemark.frontmatter.photo.birthtimeMs'
  | 'childMarkdownRemark.frontmatter.photo.blksize'
  | 'childMarkdownRemark.frontmatter.photo.blocks'
  | 'childMarkdownRemark.frontmatter.photo.changeTime'
  | 'childMarkdownRemark.frontmatter.photo.children'
  | 'childMarkdownRemark.frontmatter.photo.childrenImageSharp'
  | 'childMarkdownRemark.frontmatter.photo.childrenMarkdownRemark'
  | 'childMarkdownRemark.frontmatter.photo.childrenNotificationBarYaml'
  | 'childMarkdownRemark.frontmatter.photo.childrenTeamMembersYaml'
  | 'childMarkdownRemark.frontmatter.photo.ctime'
  | 'childMarkdownRemark.frontmatter.photo.ctimeMs'
  | 'childMarkdownRemark.frontmatter.photo.dev'
  | 'childMarkdownRemark.frontmatter.photo.dir'
  | 'childMarkdownRemark.frontmatter.photo.ext'
  | 'childMarkdownRemark.frontmatter.photo.extension'
  | 'childMarkdownRemark.frontmatter.photo.gid'
  | 'childMarkdownRemark.frontmatter.photo.hash'
  | 'childMarkdownRemark.frontmatter.photo.id'
  | 'childMarkdownRemark.frontmatter.photo.ino'
  | 'childMarkdownRemark.frontmatter.photo.mode'
  | 'childMarkdownRemark.frontmatter.photo.modifiedTime'
  | 'childMarkdownRemark.frontmatter.photo.mtime'
  | 'childMarkdownRemark.frontmatter.photo.mtimeMs'
  | 'childMarkdownRemark.frontmatter.photo.name'
  | 'childMarkdownRemark.frontmatter.photo.nlink'
  | 'childMarkdownRemark.frontmatter.photo.prettySize'
  | 'childMarkdownRemark.frontmatter.photo.publicURL'
  | 'childMarkdownRemark.frontmatter.photo.rdev'
  | 'childMarkdownRemark.frontmatter.photo.relativeDirectory'
  | 'childMarkdownRemark.frontmatter.photo.relativePath'
  | 'childMarkdownRemark.frontmatter.photo.root'
  | 'childMarkdownRemark.frontmatter.photo.size'
  | 'childMarkdownRemark.frontmatter.photo.sourceInstanceName'
  | 'childMarkdownRemark.frontmatter.photo.uid'
  | 'childMarkdownRemark.frontmatter.publishDate'
  | 'childMarkdownRemark.frontmatter.relatedTitle'
  | 'childMarkdownRemark.frontmatter.role'
  | 'childMarkdownRemark.frontmatter.summary.results'
  | 'childMarkdownRemark.frontmatter.tags'
  | 'childMarkdownRemark.frontmatter.templateKey'
  | 'childMarkdownRemark.frontmatter.title'
  | 'childMarkdownRemark.frontmatter.useCaseCode.docsUrl'
  | 'childMarkdownRemark.frontmatter.useCaseCode.iframeUrl'
  | 'childMarkdownRemark.frontmatter.useCaseCode.shareUrl'
  | 'childMarkdownRemark.headings'
  | 'childMarkdownRemark.headings.depth'
  | 'childMarkdownRemark.headings.id'
  | 'childMarkdownRemark.headings.value'
  | 'childMarkdownRemark.html'
  | 'childMarkdownRemark.htmlAst'
  | 'childMarkdownRemark.id'
  | 'childMarkdownRemark.internal.content'
  | 'childMarkdownRemark.internal.contentDigest'
  | 'childMarkdownRemark.internal.description'
  | 'childMarkdownRemark.internal.fieldOwners'
  | 'childMarkdownRemark.internal.ignoreType'
  | 'childMarkdownRemark.internal.mediaType'
  | 'childMarkdownRemark.internal.owner'
  | 'childMarkdownRemark.internal.type'
  | 'childMarkdownRemark.parent.children'
  | 'childMarkdownRemark.parent.children.children'
  | 'childMarkdownRemark.parent.children.id'
  | 'childMarkdownRemark.parent.id'
  | 'childMarkdownRemark.parent.internal.content'
  | 'childMarkdownRemark.parent.internal.contentDigest'
  | 'childMarkdownRemark.parent.internal.description'
  | 'childMarkdownRemark.parent.internal.fieldOwners'
  | 'childMarkdownRemark.parent.internal.ignoreType'
  | 'childMarkdownRemark.parent.internal.mediaType'
  | 'childMarkdownRemark.parent.internal.owner'
  | 'childMarkdownRemark.parent.internal.type'
  | 'childMarkdownRemark.parent.parent.children'
  | 'childMarkdownRemark.parent.parent.id'
  | 'childMarkdownRemark.rawMarkdownBody'
  | 'childMarkdownRemark.socialCard.absolutePath'
  | 'childMarkdownRemark.socialCard.accessTime'
  | 'childMarkdownRemark.socialCard.atime'
  | 'childMarkdownRemark.socialCard.atimeMs'
  | 'childMarkdownRemark.socialCard.base'
  | 'childMarkdownRemark.socialCard.birthTime'
  | 'childMarkdownRemark.socialCard.birthtime'
  | 'childMarkdownRemark.socialCard.birthtimeMs'
  | 'childMarkdownRemark.socialCard.blksize'
  | 'childMarkdownRemark.socialCard.blocks'
  | 'childMarkdownRemark.socialCard.changeTime'
  | 'childMarkdownRemark.socialCard.childImageSharp.children'
  | 'childMarkdownRemark.socialCard.childImageSharp.gatsbyImageData'
  | 'childMarkdownRemark.socialCard.childImageSharp.id'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.children'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.excerpt'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.excerptAst'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.fileAbsolutePath'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.headings'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.html'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.htmlAst'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.id'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.rawMarkdownBody'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.tableOfContents'
  | 'childMarkdownRemark.socialCard.childMarkdownRemark.timeToRead'
  | 'childMarkdownRemark.socialCard.childNotificationBarYaml.arrowText'
  | 'childMarkdownRemark.socialCard.childNotificationBarYaml.backgroundColor'
  | 'childMarkdownRemark.socialCard.childNotificationBarYaml.barBody'
  | 'childMarkdownRemark.socialCard.childNotificationBarYaml.children'
  | 'childMarkdownRemark.socialCard.childNotificationBarYaml.id'
  | 'childMarkdownRemark.socialCard.childNotificationBarYaml.openUrlNewTab'
  | 'childMarkdownRemark.socialCard.childNotificationBarYaml.showNotBar'
  | 'childMarkdownRemark.socialCard.childNotificationBarYaml.url'
  | 'childMarkdownRemark.socialCard.childTeamMembersYaml.children'
  | 'childMarkdownRemark.socialCard.childTeamMembersYaml.id'
  | 'childMarkdownRemark.socialCard.childTeamMembersYaml.totalMembers'
  | 'childMarkdownRemark.socialCard.children'
  | 'childMarkdownRemark.socialCard.childrenImageSharp'
  | 'childMarkdownRemark.socialCard.childrenImageSharp.children'
  | 'childMarkdownRemark.socialCard.childrenImageSharp.gatsbyImageData'
  | 'childMarkdownRemark.socialCard.childrenImageSharp.id'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.children'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.excerpt'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.excerptAst'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.fileAbsolutePath'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.headings'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.html'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.htmlAst'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.id'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.rawMarkdownBody'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.tableOfContents'
  | 'childMarkdownRemark.socialCard.childrenMarkdownRemark.timeToRead'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml.arrowText'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml.backgroundColor'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml.barBody'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml.children'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml.id'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml.openUrlNewTab'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml.showNotBar'
  | 'childMarkdownRemark.socialCard.childrenNotificationBarYaml.url'
  | 'childMarkdownRemark.socialCard.childrenTeamMembersYaml'
  | 'childMarkdownRemark.socialCard.childrenTeamMembersYaml.children'
  | 'childMarkdownRemark.socialCard.childrenTeamMembersYaml.id'
  | 'childMarkdownRemark.socialCard.childrenTeamMembersYaml.totalMembers'
  | 'childMarkdownRemark.socialCard.children.children'
  | 'childMarkdownRemark.socialCard.children.id'
  | 'childMarkdownRemark.socialCard.ctime'
  | 'childMarkdownRemark.socialCard.ctimeMs'
  | 'childMarkdownRemark.socialCard.dev'
  | 'childMarkdownRemark.socialCard.dir'
  | 'childMarkdownRemark.socialCard.ext'
  | 'childMarkdownRemark.socialCard.extension'
  | 'childMarkdownRemark.socialCard.gid'
  | 'childMarkdownRemark.socialCard.hash'
  | 'childMarkdownRemark.socialCard.id'
  | 'childMarkdownRemark.socialCard.ino'
  | 'childMarkdownRemark.socialCard.internal.content'
  | 'childMarkdownRemark.socialCard.internal.contentDigest'
  | 'childMarkdownRemark.socialCard.internal.description'
  | 'childMarkdownRemark.socialCard.internal.fieldOwners'
  | 'childMarkdownRemark.socialCard.internal.ignoreType'
  | 'childMarkdownRemark.socialCard.internal.mediaType'
  | 'childMarkdownRemark.socialCard.internal.owner'
  | 'childMarkdownRemark.socialCard.internal.type'
  | 'childMarkdownRemark.socialCard.mode'
  | 'childMarkdownRemark.socialCard.modifiedTime'
  | 'childMarkdownRemark.socialCard.mtime'
  | 'childMarkdownRemark.socialCard.mtimeMs'
  | 'childMarkdownRemark.socialCard.name'
  | 'childMarkdownRemark.socialCard.nlink'
  | 'childMarkdownRemark.socialCard.parent.children'
  | 'childMarkdownRemark.socialCard.parent.id'
  | 'childMarkdownRemark.socialCard.prettySize'
  | 'childMarkdownRemark.socialCard.publicURL'
  | 'childMarkdownRemark.socialCard.rdev'
  | 'childMarkdownRemark.socialCard.relativeDirectory'
  | 'childMarkdownRemark.socialCard.relativePath'
  | 'childMarkdownRemark.socialCard.root'
  | 'childMarkdownRemark.socialCard.size'
  | 'childMarkdownRemark.socialCard.sourceInstanceName'
  | 'childMarkdownRemark.socialCard.uid'
  | 'childMarkdownRemark.tableOfContents'
  | 'childMarkdownRemark.timeToRead'
  | 'childMarkdownRemark.wordCount.paragraphs'
  | 'childMarkdownRemark.wordCount.sentences'
  | 'childMarkdownRemark.wordCount.words'
  | 'childNotificationBarYaml.arrowText'
  | 'childNotificationBarYaml.backgroundColor'
  | 'childNotificationBarYaml.barBody'
  | 'childNotificationBarYaml.children'
  | 'childNotificationBarYaml.children.children'
  | 'childNotificationBarYaml.children.children.children'
  | 'childNotificationBarYaml.children.children.id'
  | 'childNotificationBarYaml.children.id'
  | 'childNotificationBarYaml.children.internal.content'
  | 'childNotificationBarYaml.children.internal.contentDigest'
  | 'childNotificationBarYaml.children.internal.description'
  | 'childNotificationBarYaml.children.internal.fieldOwners'
  | 'childNotificationBarYaml.children.internal.ignoreType'
  | 'childNotificationBarYaml.children.internal.mediaType'
  | 'childNotificationBarYaml.children.internal.owner'
  | 'childNotificationBarYaml.children.internal.type'
  | 'childNotificationBarYaml.children.parent.children'
  | 'childNotificationBarYaml.children.parent.id'
  | 'childNotificationBarYaml.id'
  | 'childNotificationBarYaml.internal.content'
  | 'childNotificationBarYaml.internal.contentDigest'
  | 'childNotificationBarYaml.internal.description'
  | 'childNotificationBarYaml.internal.fieldOwners'
  | 'childNotificationBarYaml.internal.ignoreType'
  | 'childNotificationBarYaml.internal.mediaType'
  | 'childNotificationBarYaml.internal.owner'
  | 'childNotificationBarYaml.internal.type'
  | 'childNotificationBarYaml.openUrlNewTab'
  | 'childNotificationBarYaml.parent.children'
  | 'childNotificationBarYaml.parent.children.children'
  | 'childNotificationBarYaml.parent.children.id'
  | 'childNotificationBarYaml.parent.id'
  | 'childNotificationBarYaml.parent.internal.content'
  | 'childNotificationBarYaml.parent.internal.contentDigest'
  | 'childNotificationBarYaml.parent.internal.description'
  | 'childNotificationBarYaml.parent.internal.fieldOwners'
  | 'childNotificationBarYaml.parent.internal.ignoreType'
  | 'childNotificationBarYaml.parent.internal.mediaType'
  | 'childNotificationBarYaml.parent.internal.owner'
  | 'childNotificationBarYaml.parent.internal.type'
  | 'childNotificationBarYaml.parent.parent.children'
  | 'childNotificationBarYaml.parent.parent.id'
  | 'childNotificationBarYaml.showNotBar'
  | 'childNotificationBarYaml.url'
  | 'childTeamMembersYaml.children'
  | 'childTeamMembersYaml.children.children'
  | 'childTeamMembersYaml.children.children.children'
  | 'childTeamMembersYaml.children.children.id'
  | 'childTeamMembersYaml.children.id'
  | 'childTeamMembersYaml.children.internal.content'
  | 'childTeamMembersYaml.children.internal.contentDigest'
  | 'childTeamMembersYaml.children.internal.description'
  | 'childTeamMembersYaml.children.internal.fieldOwners'
  | 'childTeamMembersYaml.children.internal.ignoreType'
  | 'childTeamMembersYaml.children.internal.mediaType'
  | 'childTeamMembersYaml.children.internal.owner'
  | 'childTeamMembersYaml.children.internal.type'
  | 'childTeamMembersYaml.children.parent.children'
  | 'childTeamMembersYaml.children.parent.id'
  | 'childTeamMembersYaml.id'
  | 'childTeamMembersYaml.internal.content'
  | 'childTeamMembersYaml.internal.contentDigest'
  | 'childTeamMembersYaml.internal.description'
  | 'childTeamMembersYaml.internal.fieldOwners'
  | 'childTeamMembersYaml.internal.ignoreType'
  | 'childTeamMembersYaml.internal.mediaType'
  | 'childTeamMembersYaml.internal.owner'
  | 'childTeamMembersYaml.internal.type'
  | 'childTeamMembersYaml.parent.children'
  | 'childTeamMembersYaml.parent.children.children'
  | 'childTeamMembersYaml.parent.children.id'
  | 'childTeamMembersYaml.parent.id'
  | 'childTeamMembersYaml.parent.internal.content'
  | 'childTeamMembersYaml.parent.internal.contentDigest'
  | 'childTeamMembersYaml.parent.internal.description'
  | 'childTeamMembersYaml.parent.internal.fieldOwners'
  | 'childTeamMembersYaml.parent.internal.ignoreType'
  | 'childTeamMembersYaml.parent.internal.mediaType'
  | 'childTeamMembersYaml.parent.internal.owner'
  | 'childTeamMembersYaml.parent.internal.type'
  | 'childTeamMembersYaml.parent.parent.children'
  | 'childTeamMembersYaml.parent.parent.id'
  | 'childTeamMembersYaml.totalMembers'
  | 'children'
  | 'childrenImageSharp'
  | 'childrenImageSharp.children'
  | 'childrenImageSharp.children.children'
  | 'childrenImageSharp.children.children.children'
  | 'childrenImageSharp.children.children.id'
  | 'childrenImageSharp.children.id'
  | 'childrenImageSharp.children.internal.content'
  | 'childrenImageSharp.children.internal.contentDigest'
  | 'childrenImageSharp.children.internal.description'
  | 'childrenImageSharp.children.internal.fieldOwners'
  | 'childrenImageSharp.children.internal.ignoreType'
  | 'childrenImageSharp.children.internal.mediaType'
  | 'childrenImageSharp.children.internal.owner'
  | 'childrenImageSharp.children.internal.type'
  | 'childrenImageSharp.children.parent.children'
  | 'childrenImageSharp.children.parent.id'
  | 'childrenImageSharp.fixed.aspectRatio'
  | 'childrenImageSharp.fixed.base64'
  | 'childrenImageSharp.fixed.height'
  | 'childrenImageSharp.fixed.originalName'
  | 'childrenImageSharp.fixed.src'
  | 'childrenImageSharp.fixed.srcSet'
  | 'childrenImageSharp.fixed.srcSetWebp'
  | 'childrenImageSharp.fixed.srcWebp'
  | 'childrenImageSharp.fixed.tracedSVG'
  | 'childrenImageSharp.fixed.width'
  | 'childrenImageSharp.fluid.aspectRatio'
  | 'childrenImageSharp.fluid.base64'
  | 'childrenImageSharp.fluid.originalImg'
  | 'childrenImageSharp.fluid.originalName'
  | 'childrenImageSharp.fluid.presentationHeight'
  | 'childrenImageSharp.fluid.presentationWidth'
  | 'childrenImageSharp.fluid.sizes'
  | 'childrenImageSharp.fluid.src'
  | 'childrenImageSharp.fluid.srcSet'
  | 'childrenImageSharp.fluid.srcSetWebp'
  | 'childrenImageSharp.fluid.srcWebp'
  | 'childrenImageSharp.fluid.tracedSVG'
  | 'childrenImageSharp.gatsbyImageData'
  | 'childrenImageSharp.id'
  | 'childrenImageSharp.internal.content'
  | 'childrenImageSharp.internal.contentDigest'
  | 'childrenImageSharp.internal.description'
  | 'childrenImageSharp.internal.fieldOwners'
  | 'childrenImageSharp.internal.ignoreType'
  | 'childrenImageSharp.internal.mediaType'
  | 'childrenImageSharp.internal.owner'
  | 'childrenImageSharp.internal.type'
  | 'childrenImageSharp.original.height'
  | 'childrenImageSharp.original.src'
  | 'childrenImageSharp.original.width'
  | 'childrenImageSharp.parent.children'
  | 'childrenImageSharp.parent.children.children'
  | 'childrenImageSharp.parent.children.id'
  | 'childrenImageSharp.parent.id'
  | 'childrenImageSharp.parent.internal.content'
  | 'childrenImageSharp.parent.internal.contentDigest'
  | 'childrenImageSharp.parent.internal.description'
  | 'childrenImageSharp.parent.internal.fieldOwners'
  | 'childrenImageSharp.parent.internal.ignoreType'
  | 'childrenImageSharp.parent.internal.mediaType'
  | 'childrenImageSharp.parent.internal.owner'
  | 'childrenImageSharp.parent.internal.type'
  | 'childrenImageSharp.parent.parent.children'
  | 'childrenImageSharp.parent.parent.id'
  | 'childrenImageSharp.resize.aspectRatio'
  | 'childrenImageSharp.resize.height'
  | 'childrenImageSharp.resize.originalName'
  | 'childrenImageSharp.resize.src'
  | 'childrenImageSharp.resize.tracedSVG'
  | 'childrenImageSharp.resize.width'
  | 'childrenMarkdownRemark'
  | 'childrenMarkdownRemark.children'
  | 'childrenMarkdownRemark.children.children'
  | 'childrenMarkdownRemark.children.children.children'
  | 'childrenMarkdownRemark.children.children.id'
  | 'childrenMarkdownRemark.children.id'
  | 'childrenMarkdownRemark.children.internal.content'
  | 'childrenMarkdownRemark.children.internal.contentDigest'
  | 'childrenMarkdownRemark.children.internal.description'
  | 'childrenMarkdownRemark.children.internal.fieldOwners'
  | 'childrenMarkdownRemark.children.internal.ignoreType'
  | 'childrenMarkdownRemark.children.internal.mediaType'
  | 'childrenMarkdownRemark.children.internal.owner'
  | 'childrenMarkdownRemark.children.internal.type'
  | 'childrenMarkdownRemark.children.parent.children'
  | 'childrenMarkdownRemark.children.parent.id'
  | 'childrenMarkdownRemark.excerpt'
  | 'childrenMarkdownRemark.excerptAst'
  | 'childrenMarkdownRemark.fields.authors'
  | 'childrenMarkdownRemark.fields.authors.excerpt'
  | 'childrenMarkdownRemark.fields.authors.fileAbsolutePath'
  | 'childrenMarkdownRemark.fields.authors.id'
  | 'childrenMarkdownRemark.fields.authors.parent'
  | 'childrenMarkdownRemark.fields.authors.rawMarkdownBody'
  | 'childrenMarkdownRemark.fields.slug'
  | 'childrenMarkdownRemark.fields.socialCardId'
  | 'childrenMarkdownRemark.fileAbsolutePath'
  | 'childrenMarkdownRemark.frontmatter.authors'
  | 'childrenMarkdownRemark.frontmatter.bio'
  | 'childrenMarkdownRemark.frontmatter.blocks'
  | 'childrenMarkdownRemark.frontmatter.blocks.content'
  | 'childrenMarkdownRemark.frontmatter.blocks.ctaText'
  | 'childrenMarkdownRemark.frontmatter.blocks.ctaUrl'
  | 'childrenMarkdownRemark.frontmatter.blocks.imageAlt'
  | 'childrenMarkdownRemark.frontmatter.blocks.imageTitle'
  | 'childrenMarkdownRemark.frontmatter.blocks.isCtaButton'
  | 'childrenMarkdownRemark.frontmatter.blocks.isImageAfterText'
  | 'childrenMarkdownRemark.frontmatter.blocks.subheader'
  | 'childrenMarkdownRemark.frontmatter.bottomLinks'
  | 'childrenMarkdownRemark.frontmatter.bottomLinks.text'
  | 'childrenMarkdownRemark.frontmatter.bottomLinks.url'
  | 'childrenMarkdownRemark.frontmatter.cardSection.blocks'
  | 'childrenMarkdownRemark.frontmatter.cardSection.cards'
  | 'childrenMarkdownRemark.frontmatter.cardSection.subtitle'
  | 'childrenMarkdownRemark.frontmatter.cardSection.title'
  | 'childrenMarkdownRemark.frontmatter.category'
  | 'childrenMarkdownRemark.frontmatter.customCTA.ctaText'
  | 'childrenMarkdownRemark.frontmatter.customCTA.ctaUrl'
  | 'childrenMarkdownRemark.frontmatter.customCTA.description'
  | 'childrenMarkdownRemark.frontmatter.customCTA.isPublished'
  | 'childrenMarkdownRemark.frontmatter.customCTA.openCtaNewTab'
  | 'childrenMarkdownRemark.frontmatter.customCTA.title'
  | 'childrenMarkdownRemark.frontmatter.description'
  | 'childrenMarkdownRemark.frontmatter.featured'
  | 'childrenMarkdownRemark.frontmatter.footer.ctaSubtitle'
  | 'childrenMarkdownRemark.frontmatter.footer.ctaTitle'
  | 'childrenMarkdownRemark.frontmatter.funnel'
  | 'childrenMarkdownRemark.frontmatter.header.content'
  | 'childrenMarkdownRemark.frontmatter.header.subLabel'
  | 'childrenMarkdownRemark.frontmatter.header.subTitle'
  | 'childrenMarkdownRemark.frontmatter.heroImage.imageAlt'
  | 'childrenMarkdownRemark.frontmatter.heroImage.imageTitle'
  | 'childrenMarkdownRemark.frontmatter.hero.ctaHref'
  | 'childrenMarkdownRemark.frontmatter.hero.ctaText'
  | 'childrenMarkdownRemark.frontmatter.hero.description'
  | 'childrenMarkdownRemark.frontmatter.hero.openCtaNewTab'
  | 'childrenMarkdownRemark.frontmatter.hero.title'
  | 'childrenMarkdownRemark.frontmatter.industry'
  | 'childrenMarkdownRemark.frontmatter.inlineCta.buttonHref'
  | 'childrenMarkdownRemark.frontmatter.inlineCta.buttonText'
  | 'childrenMarkdownRemark.frontmatter.inlineCta.subtitle'
  | 'childrenMarkdownRemark.frontmatter.inlineCta.title'
  | 'childrenMarkdownRemark.frontmatter.invertContent'
  | 'childrenMarkdownRemark.frontmatter.isHidden'
  | 'childrenMarkdownRemark.frontmatter.isPublished'
  | 'childrenMarkdownRemark.frontmatter.metadata.description'
  | 'childrenMarkdownRemark.frontmatter.metadata.imageAlt'
  | 'childrenMarkdownRemark.frontmatter.metadata.imageTitle'
  | 'childrenMarkdownRemark.frontmatter.metadata.title'
  | 'childrenMarkdownRemark.frontmatter.metadata.url'
  | 'childrenMarkdownRemark.frontmatter.name'
  | 'childrenMarkdownRemark.frontmatter.photo.absolutePath'
  | 'childrenMarkdownRemark.frontmatter.photo.accessTime'
  | 'childrenMarkdownRemark.frontmatter.photo.atime'
  | 'childrenMarkdownRemark.frontmatter.photo.atimeMs'
  | 'childrenMarkdownRemark.frontmatter.photo.base'
  | 'childrenMarkdownRemark.frontmatter.photo.birthTime'
  | 'childrenMarkdownRemark.frontmatter.photo.birthtime'
  | 'childrenMarkdownRemark.frontmatter.photo.birthtimeMs'
  | 'childrenMarkdownRemark.frontmatter.photo.blksize'
  | 'childrenMarkdownRemark.frontmatter.photo.blocks'
  | 'childrenMarkdownRemark.frontmatter.photo.changeTime'
  | 'childrenMarkdownRemark.frontmatter.photo.children'
  | 'childrenMarkdownRemark.frontmatter.photo.childrenImageSharp'
  | 'childrenMarkdownRemark.frontmatter.photo.childrenMarkdownRemark'
  | 'childrenMarkdownRemark.frontmatter.photo.childrenNotificationBarYaml'
  | 'childrenMarkdownRemark.frontmatter.photo.childrenTeamMembersYaml'
  | 'childrenMarkdownRemark.frontmatter.photo.ctime'
  | 'childrenMarkdownRemark.frontmatter.photo.ctimeMs'
  | 'childrenMarkdownRemark.frontmatter.photo.dev'
  | 'childrenMarkdownRemark.frontmatter.photo.dir'
  | 'childrenMarkdownRemark.frontmatter.photo.ext'
  | 'childrenMarkdownRemark.frontmatter.photo.extension'
  | 'childrenMarkdownRemark.frontmatter.photo.gid'
  | 'childrenMarkdownRemark.frontmatter.photo.hash'
  | 'childrenMarkdownRemark.frontmatter.photo.id'
  | 'childrenMarkdownRemark.frontmatter.photo.ino'
  | 'childrenMarkdownRemark.frontmatter.photo.mode'
  | 'childrenMarkdownRemark.frontmatter.photo.modifiedTime'
  | 'childrenMarkdownRemark.frontmatter.photo.mtime'
  | 'childrenMarkdownRemark.frontmatter.photo.mtimeMs'
  | 'childrenMarkdownRemark.frontmatter.photo.name'
  | 'childrenMarkdownRemark.frontmatter.photo.nlink'
  | 'childrenMarkdownRemark.frontmatter.photo.prettySize'
  | 'childrenMarkdownRemark.frontmatter.photo.publicURL'
  | 'childrenMarkdownRemark.frontmatter.photo.rdev'
  | 'childrenMarkdownRemark.frontmatter.photo.relativeDirectory'
  | 'childrenMarkdownRemark.frontmatter.photo.relativePath'
  | 'childrenMarkdownRemark.frontmatter.photo.root'
  | 'childrenMarkdownRemark.frontmatter.photo.size'
  | 'childrenMarkdownRemark.frontmatter.photo.sourceInstanceName'
  | 'childrenMarkdownRemark.frontmatter.photo.uid'
  | 'childrenMarkdownRemark.frontmatter.publishDate'
  | 'childrenMarkdownRemark.frontmatter.relatedTitle'
  | 'childrenMarkdownRemark.frontmatter.role'
  | 'childrenMarkdownRemark.frontmatter.summary.results'
  | 'childrenMarkdownRemark.frontmatter.tags'
  | 'childrenMarkdownRemark.frontmatter.templateKey'
  | 'childrenMarkdownRemark.frontmatter.title'
  | 'childrenMarkdownRemark.frontmatter.useCaseCode.docsUrl'
  | 'childrenMarkdownRemark.frontmatter.useCaseCode.iframeUrl'
  | 'childrenMarkdownRemark.frontmatter.useCaseCode.shareUrl'
  | 'childrenMarkdownRemark.headings'
  | 'childrenMarkdownRemark.headings.depth'
  | 'childrenMarkdownRemark.headings.id'
  | 'childrenMarkdownRemark.headings.value'
  | 'childrenMarkdownRemark.html'
  | 'childrenMarkdownRemark.htmlAst'
  | 'childrenMarkdownRemark.id'
  | 'childrenMarkdownRemark.internal.content'
  | 'childrenMarkdownRemark.internal.contentDigest'
  | 'childrenMarkdownRemark.internal.description'
  | 'childrenMarkdownRemark.internal.fieldOwners'
  | 'childrenMarkdownRemark.internal.ignoreType'
  | 'childrenMarkdownRemark.internal.mediaType'
  | 'childrenMarkdownRemark.internal.owner'
  | 'childrenMarkdownRemark.internal.type'
  | 'childrenMarkdownRemark.parent.children'
  | 'childrenMarkdownRemark.parent.children.children'
  | 'childrenMarkdownRemark.parent.children.id'
  | 'childrenMarkdownRemark.parent.id'
  | 'childrenMarkdownRemark.parent.internal.content'
  | 'childrenMarkdownRemark.parent.internal.contentDigest'
  | 'childrenMarkdownRemark.parent.internal.description'
  | 'childrenMarkdownRemark.parent.internal.fieldOwners'
  | 'childrenMarkdownRemark.parent.internal.ignoreType'
  | 'childrenMarkdownRemark.parent.internal.mediaType'
  | 'childrenMarkdownRemark.parent.internal.owner'
  | 'childrenMarkdownRemark.parent.internal.type'
  | 'childrenMarkdownRemark.parent.parent.children'
  | 'childrenMarkdownRemark.parent.parent.id'
  | 'childrenMarkdownRemark.rawMarkdownBody'
  | 'childrenMarkdownRemark.socialCard.absolutePath'
  | 'childrenMarkdownRemark.socialCard.accessTime'
  | 'childrenMarkdownRemark.socialCard.atime'
  | 'childrenMarkdownRemark.socialCard.atimeMs'
  | 'childrenMarkdownRemark.socialCard.base'
  | 'childrenMarkdownRemark.socialCard.birthTime'
  | 'childrenMarkdownRemark.socialCard.birthtime'
  | 'childrenMarkdownRemark.socialCard.birthtimeMs'
  | 'childrenMarkdownRemark.socialCard.blksize'
  | 'childrenMarkdownRemark.socialCard.blocks'
  | 'childrenMarkdownRemark.socialCard.changeTime'
  | 'childrenMarkdownRemark.socialCard.childImageSharp.children'
  | 'childrenMarkdownRemark.socialCard.childImageSharp.gatsbyImageData'
  | 'childrenMarkdownRemark.socialCard.childImageSharp.id'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.children'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.excerpt'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.excerptAst'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.fileAbsolutePath'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.headings'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.html'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.htmlAst'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.id'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.rawMarkdownBody'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.tableOfContents'
  | 'childrenMarkdownRemark.socialCard.childMarkdownRemark.timeToRead'
  | 'childrenMarkdownRemark.socialCard.childNotificationBarYaml.arrowText'
  | 'childrenMarkdownRemark.socialCard.childNotificationBarYaml.backgroundColor'
  | 'childrenMarkdownRemark.socialCard.childNotificationBarYaml.barBody'
  | 'childrenMarkdownRemark.socialCard.childNotificationBarYaml.children'
  | 'childrenMarkdownRemark.socialCard.childNotificationBarYaml.id'
  | 'childrenMarkdownRemark.socialCard.childNotificationBarYaml.openUrlNewTab'
  | 'childrenMarkdownRemark.socialCard.childNotificationBarYaml.showNotBar'
  | 'childrenMarkdownRemark.socialCard.childNotificationBarYaml.url'
  | 'childrenMarkdownRemark.socialCard.childTeamMembersYaml.children'
  | 'childrenMarkdownRemark.socialCard.childTeamMembersYaml.id'
  | 'childrenMarkdownRemark.socialCard.childTeamMembersYaml.totalMembers'
  | 'childrenMarkdownRemark.socialCard.children'
  | 'childrenMarkdownRemark.socialCard.childrenImageSharp'
  | 'childrenMarkdownRemark.socialCard.childrenImageSharp.children'
  | 'childrenMarkdownRemark.socialCard.childrenImageSharp.gatsbyImageData'
  | 'childrenMarkdownRemark.socialCard.childrenImageSharp.id'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.children'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.excerpt'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.excerptAst'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.fileAbsolutePath'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.headings'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.html'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.htmlAst'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.id'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.rawMarkdownBody'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.tableOfContents'
  | 'childrenMarkdownRemark.socialCard.childrenMarkdownRemark.timeToRead'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml.arrowText'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml.backgroundColor'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml.barBody'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml.children'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml.id'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml.openUrlNewTab'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml.showNotBar'
  | 'childrenMarkdownRemark.socialCard.childrenNotificationBarYaml.url'
  | 'childrenMarkdownRemark.socialCard.childrenTeamMembersYaml'
  | 'childrenMarkdownRemark.socialCard.childrenTeamMembersYaml.children'
  | 'childrenMarkdownRemark.socialCard.childrenTeamMembersYaml.id'
  | 'childrenMarkdownRemark.socialCard.childrenTeamMembersYaml.totalMembers'
  | 'childrenMarkdownRemark.socialCard.children.children'
  | 'childrenMarkdownRemark.socialCard.children.id'
  | 'childrenMarkdownRemark.socialCard.ctime'
  | 'childrenMarkdownRemark.socialCard.ctimeMs'
  | 'childrenMarkdownRemark.socialCard.dev'
  | 'childrenMarkdownRemark.socialCard.dir'
  | 'childrenMarkdownRemark.socialCard.ext'
  | 'childrenMarkdownRemark.socialCard.extension'
  | 'childrenMarkdownRemark.socialCard.gid'
  | 'childrenMarkdownRemark.socialCard.hash'
  | 'childrenMarkdownRemark.socialCard.id'
  | 'childrenMarkdownRemark.socialCard.ino'
  | 'childrenMarkdownRemark.socialCard.internal.content'
  | 'childrenMarkdownRemark.socialCard.internal.contentDigest'
  | 'childrenMarkdownRemark.socialCard.internal.description'
  | 'childrenMarkdownRemark.socialCard.internal.fieldOwners'
  | 'childrenMarkdownRemark.socialCard.internal.ignoreType'
  | 'childrenMarkdownRemark.socialCard.internal.mediaType'
  | 'childrenMarkdownRemark.socialCard.internal.owner'
  | 'childrenMarkdownRemark.socialCard.internal.type'
  | 'childrenMarkdownRemark.socialCard.mode'
  | 'childrenMarkdownRemark.socialCard.modifiedTime'
  | 'childrenMarkdownRemark.socialCard.mtime'
  | 'childrenMarkdownRemark.socialCard.mtimeMs'
  | 'childrenMarkdownRemark.socialCard.name'
  | 'childrenMarkdownRemark.socialCard.nlink'
  | 'childrenMarkdownRemark.socialCard.parent.children'
  | 'childrenMarkdownRemark.socialCard.parent.id'
  | 'childrenMarkdownRemark.socialCard.prettySize'
  | 'childrenMarkdownRemark.socialCard.publicURL'
  | 'childrenMarkdownRemark.socialCard.rdev'
  | 'childrenMarkdownRemark.socialCard.relativeDirectory'
  | 'childrenMarkdownRemark.socialCard.relativePath'
  | 'childrenMarkdownRemark.socialCard.root'
  | 'childrenMarkdownRemark.socialCard.size'
  | 'childrenMarkdownRemark.socialCard.sourceInstanceName'
  | 'childrenMarkdownRemark.socialCard.uid'
  | 'childrenMarkdownRemark.tableOfContents'
  | 'childrenMarkdownRemark.timeToRead'
  | 'childrenMarkdownRemark.wordCount.paragraphs'
  | 'childrenMarkdownRemark.wordCount.sentences'
  | 'childrenMarkdownRemark.wordCount.words'
  | 'childrenNotificationBarYaml'
  | 'childrenNotificationBarYaml.arrowText'
  | 'childrenNotificationBarYaml.backgroundColor'
  | 'childrenNotificationBarYaml.barBody'
  | 'childrenNotificationBarYaml.children'
  | 'childrenNotificationBarYaml.children.children'
  | 'childrenNotificationBarYaml.children.children.children'
  | 'childrenNotificationBarYaml.children.children.id'
  | 'childrenNotificationBarYaml.children.id'
  | 'childrenNotificationBarYaml.children.internal.content'
  | 'childrenNotificationBarYaml.children.internal.contentDigest'
  | 'childrenNotificationBarYaml.children.internal.description'
  | 'childrenNotificationBarYaml.children.internal.fieldOwners'
  | 'childrenNotificationBarYaml.children.internal.ignoreType'
  | 'childrenNotificationBarYaml.children.internal.mediaType'
  | 'childrenNotificationBarYaml.children.internal.owner'
  | 'childrenNotificationBarYaml.children.internal.type'
  | 'childrenNotificationBarYaml.children.parent.children'
  | 'childrenNotificationBarYaml.children.parent.id'
  | 'childrenNotificationBarYaml.id'
  | 'childrenNotificationBarYaml.internal.content'
  | 'childrenNotificationBarYaml.internal.contentDigest'
  | 'childrenNotificationBarYaml.internal.description'
  | 'childrenNotificationBarYaml.internal.fieldOwners'
  | 'childrenNotificationBarYaml.internal.ignoreType'
  | 'childrenNotificationBarYaml.internal.mediaType'
  | 'childrenNotificationBarYaml.internal.owner'
  | 'childrenNotificationBarYaml.internal.type'
  | 'childrenNotificationBarYaml.openUrlNewTab'
  | 'childrenNotificationBarYaml.parent.children'
  | 'childrenNotificationBarYaml.parent.children.children'
  | 'childrenNotificationBarYaml.parent.children.id'
  | 'childrenNotificationBarYaml.parent.id'
  | 'childrenNotificationBarYaml.parent.internal.content'
  | 'childrenNotificationBarYaml.parent.internal.contentDigest'
  | 'childrenNotificationBarYaml.parent.internal.description'
  | 'childrenNotificationBarYaml.parent.internal.fieldOwners'
  | 'childrenNotificationBarYaml.parent.internal.ignoreType'
  | 'childrenNotificationBarYaml.parent.internal.mediaType'
  | 'childrenNotificationBarYaml.parent.internal.owner'
  | 'childrenNotificationBarYaml.parent.internal.type'
  | 'childrenNotificationBarYaml.parent.parent.children'
  | 'childrenNotificationBarYaml.parent.parent.id'
  | 'childrenNotificationBarYaml.showNotBar'
  | 'childrenNotificationBarYaml.url'
  | 'childrenTeamMembersYaml'
  | 'childrenTeamMembersYaml.children'
  | 'childrenTeamMembersYaml.children.children'
  | 'childrenTeamMembersYaml.children.children.children'
  | 'childrenTeamMembersYaml.children.children.id'
  | 'childrenTeamMembersYaml.children.id'
  | 'childrenTeamMembersYaml.children.internal.content'
  | 'childrenTeamMembersYaml.children.internal.contentDigest'
  | 'childrenTeamMembersYaml.children.internal.description'
  | 'childrenTeamMembersYaml.children.internal.fieldOwners'
  | 'childrenTeamMembersYaml.children.internal.ignoreType'
  | 'childrenTeamMembersYaml.children.internal.mediaType'
  | 'childrenTeamMembersYaml.children.internal.owner'
  | 'childrenTeamMembersYaml.children.internal.type'
  | 'childrenTeamMembersYaml.children.parent.children'
  | 'childrenTeamMembersYaml.children.parent.id'
  | 'childrenTeamMembersYaml.id'
  | 'childrenTeamMembersYaml.internal.content'
  | 'childrenTeamMembersYaml.internal.contentDigest'
  | 'childrenTeamMembersYaml.internal.description'
  | 'childrenTeamMembersYaml.internal.fieldOwners'
  | 'childrenTeamMembersYaml.internal.ignoreType'
  | 'childrenTeamMembersYaml.internal.mediaType'
  | 'childrenTeamMembersYaml.internal.owner'
  | 'childrenTeamMembersYaml.internal.type'
  | 'childrenTeamMembersYaml.parent.children'
  | 'childrenTeamMembersYaml.parent.children.children'
  | 'childrenTeamMembersYaml.parent.children.id'
  | 'childrenTeamMembersYaml.parent.id'
  | 'childrenTeamMembersYaml.parent.internal.content'
  | 'childrenTeamMembersYaml.parent.internal.contentDigest'
  | 'childrenTeamMembersYaml.parent.internal.description'
  | 'childrenTeamMembersYaml.parent.internal.fieldOwners'
  | 'childrenTeamMembersYaml.parent.internal.ignoreType'
  | 'childrenTeamMembersYaml.parent.internal.mediaType'
  | 'childrenTeamMembersYaml.parent.internal.owner'
  | 'childrenTeamMembersYaml.parent.internal.type'
  | 'childrenTeamMembersYaml.parent.parent.children'
  | 'childrenTeamMembersYaml.parent.parent.id'
  | 'childrenTeamMembersYaml.totalMembers'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'ctime'
  | 'ctimeMs'
  | 'dev'
  | 'dir'
  | 'ext'
  | 'extension'
  | 'gid'
  | 'hash'
  | 'id'
  | 'ino'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'mode'
  | 'modifiedTime'
  | 'mtime'
  | 'mtimeMs'
  | 'name'
  | 'nlink'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'prettySize'
  | 'publicURL'
  | 'rdev'
  | 'relativeDirectory'
  | 'relativePath'
  | 'root'
  | 'size'
  | 'sourceInstanceName'
  | 'uid';

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly childNotificationBarYaml: InputMaybe<NotificationBarYamlFilterInput>;
  readonly childTeamMembersYaml: InputMaybe<TeamMembersYamlFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly childrenNotificationBarYaml: InputMaybe<NotificationBarYamlFilterListInput>;
  readonly childrenTeamMembersYaml: InputMaybe<TeamMembersYamlFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_minArgs = {
  field: FileFieldsEnum;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldsEnum;
};

type FileSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<FileFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'NO_CHANGE'
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type Header = {
  readonly content: Maybe<Scalars['String']>;
  readonly pdf: Maybe<File>;
  readonly subLabel: Maybe<Scalars['String']>;
  readonly subTitle: Maybe<Scalars['String']>;
};

type HeaderFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly pdf: InputMaybe<FileFilterInput>;
  readonly subLabel: InputMaybe<StringQueryOperatorInput>;
  readonly subTitle: InputMaybe<StringQueryOperatorInput>;
};

type ImageCropFocus =
  | 17
  | 'CENTER'
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | 'AUTO'
  | 'avif'
  | 'jpg'
  | 'NO_CHANGE'
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'fixed.aspectRatio'
  | 'fixed.base64'
  | 'fixed.height'
  | 'fixed.originalName'
  | 'fixed.src'
  | 'fixed.srcSet'
  | 'fixed.srcSetWebp'
  | 'fixed.srcWebp'
  | 'fixed.tracedSVG'
  | 'fixed.width'
  | 'fluid.aspectRatio'
  | 'fluid.base64'
  | 'fluid.originalImg'
  | 'fluid.originalName'
  | 'fluid.presentationHeight'
  | 'fluid.presentationWidth'
  | 'fluid.sizes'
  | 'fluid.src'
  | 'fluid.srcSet'
  | 'fluid.srcSetWebp'
  | 'fluid.srcWebp'
  | 'fluid.tracedSVG'
  | 'gatsbyImageData'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'original.height'
  | 'original.src'
  | 'original.width'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'resize.aspectRatio'
  | 'resize.height'
  | 'resize.originalName'
  | 'resize.src'
  | 'resize.tracedSVG'
  | 'resize.width';

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldsEnum;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldsEnum;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type InlineCta = {
  readonly buttonHref: Maybe<Scalars['String']>;
  readonly buttonText: Maybe<Scalars['String']>;
  readonly subtitle: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type InlineCtaFilterInput = {
  readonly buttonHref: InputMaybe<StringQueryOperatorInput>;
  readonly buttonText: InputMaybe<StringQueryOperatorInput>;
  readonly subtitle: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly fields: Maybe<MarkdownRemarkFields>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly socialCard: Maybe<File>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFields = {
  readonly authors: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFieldsAuthors>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly socialCardId: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsAuthors = {
  readonly excerpt: Maybe<Scalars['String']>;
  readonly fields: Maybe<MarkdownRemarkFieldsAuthorsFields>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MarkdownRemarkFieldsAuthorsFrontmatter>;
  readonly id: Maybe<Scalars['String']>;
  readonly internal: Maybe<MarkdownRemarkFieldsAuthorsInternal>;
  readonly parent: Maybe<Scalars['String']>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsAuthorsFields = {
  readonly slug: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsAuthorsFieldsFilterInput = {
  readonly slug: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFieldsAuthorsFilterInput = {
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly fields: InputMaybe<MarkdownRemarkFieldsAuthorsFieldsFilterInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFieldsAuthorsFrontmatterFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<MarkdownRemarkFieldsAuthorsInternalFilterInput>;
  readonly parent: InputMaybe<StringQueryOperatorInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFieldsAuthorsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFieldsAuthorsFilterInput>;
};

type MarkdownRemarkFieldsAuthorsFrontmatter = {
  readonly bio: Maybe<Scalars['String']>;
  readonly photo: Maybe<File>;
  readonly role: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsAuthorsFrontmatterFilterInput = {
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly photo: InputMaybe<FileFilterInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFieldsAuthorsInternal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Maybe<Scalars['String']>;
  readonly counter: Maybe<Scalars['Int']>;
  readonly fieldOwners: Maybe<MarkdownRemarkFieldsAuthorsInternalFieldOwners>;
  readonly owner: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsAuthorsInternalFieldOwners = {
  readonly slug: Maybe<Scalars['String']>;
};

type MarkdownRemarkFieldsAuthorsInternalFieldOwnersFilterInput = {
  readonly slug: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFieldsAuthorsInternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly counter: InputMaybe<IntQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<MarkdownRemarkFieldsAuthorsInternalFieldOwnersFilterInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'excerpt'
  | 'excerptAst'
  | 'fields.authors'
  | 'fields.authors.excerpt'
  | 'fields.authors.fields.slug'
  | 'fields.authors.fileAbsolutePath'
  | 'fields.authors.frontmatter.bio'
  | 'fields.authors.frontmatter.role'
  | 'fields.authors.frontmatter.title'
  | 'fields.authors.id'
  | 'fields.authors.internal.content'
  | 'fields.authors.internal.contentDigest'
  | 'fields.authors.internal.counter'
  | 'fields.authors.internal.owner'
  | 'fields.authors.internal.type'
  | 'fields.authors.parent'
  | 'fields.authors.rawMarkdownBody'
  | 'fields.slug'
  | 'fields.socialCardId'
  | 'fileAbsolutePath'
  | 'frontmatter.authors'
  | 'frontmatter.bio'
  | 'frontmatter.blocks'
  | 'frontmatter.blocks.content'
  | 'frontmatter.blocks.ctaText'
  | 'frontmatter.blocks.ctaUrl'
  | 'frontmatter.blocks.imageAlt'
  | 'frontmatter.blocks.imageTitle'
  | 'frontmatter.blocks.image.absolutePath'
  | 'frontmatter.blocks.image.accessTime'
  | 'frontmatter.blocks.image.atime'
  | 'frontmatter.blocks.image.atimeMs'
  | 'frontmatter.blocks.image.base'
  | 'frontmatter.blocks.image.birthTime'
  | 'frontmatter.blocks.image.birthtime'
  | 'frontmatter.blocks.image.birthtimeMs'
  | 'frontmatter.blocks.image.blksize'
  | 'frontmatter.blocks.image.blocks'
  | 'frontmatter.blocks.image.changeTime'
  | 'frontmatter.blocks.image.children'
  | 'frontmatter.blocks.image.childrenImageSharp'
  | 'frontmatter.blocks.image.childrenMarkdownRemark'
  | 'frontmatter.blocks.image.childrenNotificationBarYaml'
  | 'frontmatter.blocks.image.childrenTeamMembersYaml'
  | 'frontmatter.blocks.image.ctime'
  | 'frontmatter.blocks.image.ctimeMs'
  | 'frontmatter.blocks.image.dev'
  | 'frontmatter.blocks.image.dir'
  | 'frontmatter.blocks.image.ext'
  | 'frontmatter.blocks.image.extension'
  | 'frontmatter.blocks.image.gid'
  | 'frontmatter.blocks.image.hash'
  | 'frontmatter.blocks.image.id'
  | 'frontmatter.blocks.image.ino'
  | 'frontmatter.blocks.image.mode'
  | 'frontmatter.blocks.image.modifiedTime'
  | 'frontmatter.blocks.image.mtime'
  | 'frontmatter.blocks.image.mtimeMs'
  | 'frontmatter.blocks.image.name'
  | 'frontmatter.blocks.image.nlink'
  | 'frontmatter.blocks.image.prettySize'
  | 'frontmatter.blocks.image.publicURL'
  | 'frontmatter.blocks.image.rdev'
  | 'frontmatter.blocks.image.relativeDirectory'
  | 'frontmatter.blocks.image.relativePath'
  | 'frontmatter.blocks.image.root'
  | 'frontmatter.blocks.image.size'
  | 'frontmatter.blocks.image.sourceInstanceName'
  | 'frontmatter.blocks.image.uid'
  | 'frontmatter.blocks.isCtaButton'
  | 'frontmatter.blocks.isImageAfterText'
  | 'frontmatter.blocks.subheader'
  | 'frontmatter.bottomLinks'
  | 'frontmatter.bottomLinks.text'
  | 'frontmatter.bottomLinks.url'
  | 'frontmatter.cardSection.blocks'
  | 'frontmatter.cardSection.blocks.children'
  | 'frontmatter.cardSection.blocks.content'
  | 'frontmatter.cardSection.blocks.id'
  | 'frontmatter.cardSection.cards'
  | 'frontmatter.cardSection.cards.children'
  | 'frontmatter.cardSection.cards.content'
  | 'frontmatter.cardSection.cards.iconAlt'
  | 'frontmatter.cardSection.cards.iconTitle'
  | 'frontmatter.cardSection.cards.id'
  | 'frontmatter.cardSection.cards.title'
  | 'frontmatter.cardSection.subtitle'
  | 'frontmatter.cardSection.title'
  | 'frontmatter.category'
  | 'frontmatter.customCTA.ctaText'
  | 'frontmatter.customCTA.ctaUrl'
  | 'frontmatter.customCTA.description'
  | 'frontmatter.customCTA.isPublished'
  | 'frontmatter.customCTA.openCtaNewTab'
  | 'frontmatter.customCTA.title'
  | 'frontmatter.description'
  | 'frontmatter.featured'
  | 'frontmatter.footer.ctaSubtitle'
  | 'frontmatter.footer.ctaTitle'
  | 'frontmatter.funnel'
  | 'frontmatter.header.content'
  | 'frontmatter.header.pdf.absolutePath'
  | 'frontmatter.header.pdf.accessTime'
  | 'frontmatter.header.pdf.atime'
  | 'frontmatter.header.pdf.atimeMs'
  | 'frontmatter.header.pdf.base'
  | 'frontmatter.header.pdf.birthTime'
  | 'frontmatter.header.pdf.birthtime'
  | 'frontmatter.header.pdf.birthtimeMs'
  | 'frontmatter.header.pdf.blksize'
  | 'frontmatter.header.pdf.blocks'
  | 'frontmatter.header.pdf.changeTime'
  | 'frontmatter.header.pdf.children'
  | 'frontmatter.header.pdf.childrenImageSharp'
  | 'frontmatter.header.pdf.childrenMarkdownRemark'
  | 'frontmatter.header.pdf.childrenNotificationBarYaml'
  | 'frontmatter.header.pdf.childrenTeamMembersYaml'
  | 'frontmatter.header.pdf.ctime'
  | 'frontmatter.header.pdf.ctimeMs'
  | 'frontmatter.header.pdf.dev'
  | 'frontmatter.header.pdf.dir'
  | 'frontmatter.header.pdf.ext'
  | 'frontmatter.header.pdf.extension'
  | 'frontmatter.header.pdf.gid'
  | 'frontmatter.header.pdf.hash'
  | 'frontmatter.header.pdf.id'
  | 'frontmatter.header.pdf.ino'
  | 'frontmatter.header.pdf.mode'
  | 'frontmatter.header.pdf.modifiedTime'
  | 'frontmatter.header.pdf.mtime'
  | 'frontmatter.header.pdf.mtimeMs'
  | 'frontmatter.header.pdf.name'
  | 'frontmatter.header.pdf.nlink'
  | 'frontmatter.header.pdf.prettySize'
  | 'frontmatter.header.pdf.publicURL'
  | 'frontmatter.header.pdf.rdev'
  | 'frontmatter.header.pdf.relativeDirectory'
  | 'frontmatter.header.pdf.relativePath'
  | 'frontmatter.header.pdf.root'
  | 'frontmatter.header.pdf.size'
  | 'frontmatter.header.pdf.sourceInstanceName'
  | 'frontmatter.header.pdf.uid'
  | 'frontmatter.header.subLabel'
  | 'frontmatter.header.subTitle'
  | 'frontmatter.heroImage.imageAlt'
  | 'frontmatter.heroImage.imageTitle'
  | 'frontmatter.heroImage.image.absolutePath'
  | 'frontmatter.heroImage.image.accessTime'
  | 'frontmatter.heroImage.image.atime'
  | 'frontmatter.heroImage.image.atimeMs'
  | 'frontmatter.heroImage.image.base'
  | 'frontmatter.heroImage.image.birthTime'
  | 'frontmatter.heroImage.image.birthtime'
  | 'frontmatter.heroImage.image.birthtimeMs'
  | 'frontmatter.heroImage.image.blksize'
  | 'frontmatter.heroImage.image.blocks'
  | 'frontmatter.heroImage.image.changeTime'
  | 'frontmatter.heroImage.image.children'
  | 'frontmatter.heroImage.image.childrenImageSharp'
  | 'frontmatter.heroImage.image.childrenMarkdownRemark'
  | 'frontmatter.heroImage.image.childrenNotificationBarYaml'
  | 'frontmatter.heroImage.image.childrenTeamMembersYaml'
  | 'frontmatter.heroImage.image.ctime'
  | 'frontmatter.heroImage.image.ctimeMs'
  | 'frontmatter.heroImage.image.dev'
  | 'frontmatter.heroImage.image.dir'
  | 'frontmatter.heroImage.image.ext'
  | 'frontmatter.heroImage.image.extension'
  | 'frontmatter.heroImage.image.gid'
  | 'frontmatter.heroImage.image.hash'
  | 'frontmatter.heroImage.image.id'
  | 'frontmatter.heroImage.image.ino'
  | 'frontmatter.heroImage.image.mode'
  | 'frontmatter.heroImage.image.modifiedTime'
  | 'frontmatter.heroImage.image.mtime'
  | 'frontmatter.heroImage.image.mtimeMs'
  | 'frontmatter.heroImage.image.name'
  | 'frontmatter.heroImage.image.nlink'
  | 'frontmatter.heroImage.image.prettySize'
  | 'frontmatter.heroImage.image.publicURL'
  | 'frontmatter.heroImage.image.rdev'
  | 'frontmatter.heroImage.image.relativeDirectory'
  | 'frontmatter.heroImage.image.relativePath'
  | 'frontmatter.heroImage.image.root'
  | 'frontmatter.heroImage.image.size'
  | 'frontmatter.heroImage.image.sourceInstanceName'
  | 'frontmatter.heroImage.image.uid'
  | 'frontmatter.hero.ctaHref'
  | 'frontmatter.hero.ctaText'
  | 'frontmatter.hero.description'
  | 'frontmatter.hero.openCtaNewTab'
  | 'frontmatter.hero.title'
  | 'frontmatter.industry'
  | 'frontmatter.inlineCta.buttonHref'
  | 'frontmatter.inlineCta.buttonText'
  | 'frontmatter.inlineCta.subtitle'
  | 'frontmatter.inlineCta.title'
  | 'frontmatter.invertContent'
  | 'frontmatter.isHidden'
  | 'frontmatter.isPublished'
  | 'frontmatter.metadata.description'
  | 'frontmatter.metadata.imageAlt'
  | 'frontmatter.metadata.imageTitle'
  | 'frontmatter.metadata.image.absolutePath'
  | 'frontmatter.metadata.image.accessTime'
  | 'frontmatter.metadata.image.atime'
  | 'frontmatter.metadata.image.atimeMs'
  | 'frontmatter.metadata.image.base'
  | 'frontmatter.metadata.image.birthTime'
  | 'frontmatter.metadata.image.birthtime'
  | 'frontmatter.metadata.image.birthtimeMs'
  | 'frontmatter.metadata.image.blksize'
  | 'frontmatter.metadata.image.blocks'
  | 'frontmatter.metadata.image.changeTime'
  | 'frontmatter.metadata.image.children'
  | 'frontmatter.metadata.image.childrenImageSharp'
  | 'frontmatter.metadata.image.childrenMarkdownRemark'
  | 'frontmatter.metadata.image.childrenNotificationBarYaml'
  | 'frontmatter.metadata.image.childrenTeamMembersYaml'
  | 'frontmatter.metadata.image.ctime'
  | 'frontmatter.metadata.image.ctimeMs'
  | 'frontmatter.metadata.image.dev'
  | 'frontmatter.metadata.image.dir'
  | 'frontmatter.metadata.image.ext'
  | 'frontmatter.metadata.image.extension'
  | 'frontmatter.metadata.image.gid'
  | 'frontmatter.metadata.image.hash'
  | 'frontmatter.metadata.image.id'
  | 'frontmatter.metadata.image.ino'
  | 'frontmatter.metadata.image.mode'
  | 'frontmatter.metadata.image.modifiedTime'
  | 'frontmatter.metadata.image.mtime'
  | 'frontmatter.metadata.image.mtimeMs'
  | 'frontmatter.metadata.image.name'
  | 'frontmatter.metadata.image.nlink'
  | 'frontmatter.metadata.image.prettySize'
  | 'frontmatter.metadata.image.publicURL'
  | 'frontmatter.metadata.image.rdev'
  | 'frontmatter.metadata.image.relativeDirectory'
  | 'frontmatter.metadata.image.relativePath'
  | 'frontmatter.metadata.image.root'
  | 'frontmatter.metadata.image.size'
  | 'frontmatter.metadata.image.sourceInstanceName'
  | 'frontmatter.metadata.image.uid'
  | 'frontmatter.metadata.socialImage.absolutePath'
  | 'frontmatter.metadata.socialImage.accessTime'
  | 'frontmatter.metadata.socialImage.atime'
  | 'frontmatter.metadata.socialImage.atimeMs'
  | 'frontmatter.metadata.socialImage.base'
  | 'frontmatter.metadata.socialImage.birthTime'
  | 'frontmatter.metadata.socialImage.birthtime'
  | 'frontmatter.metadata.socialImage.birthtimeMs'
  | 'frontmatter.metadata.socialImage.blksize'
  | 'frontmatter.metadata.socialImage.blocks'
  | 'frontmatter.metadata.socialImage.changeTime'
  | 'frontmatter.metadata.socialImage.children'
  | 'frontmatter.metadata.socialImage.childrenImageSharp'
  | 'frontmatter.metadata.socialImage.childrenMarkdownRemark'
  | 'frontmatter.metadata.socialImage.childrenNotificationBarYaml'
  | 'frontmatter.metadata.socialImage.childrenTeamMembersYaml'
  | 'frontmatter.metadata.socialImage.ctime'
  | 'frontmatter.metadata.socialImage.ctimeMs'
  | 'frontmatter.metadata.socialImage.dev'
  | 'frontmatter.metadata.socialImage.dir'
  | 'frontmatter.metadata.socialImage.ext'
  | 'frontmatter.metadata.socialImage.extension'
  | 'frontmatter.metadata.socialImage.gid'
  | 'frontmatter.metadata.socialImage.hash'
  | 'frontmatter.metadata.socialImage.id'
  | 'frontmatter.metadata.socialImage.ino'
  | 'frontmatter.metadata.socialImage.mode'
  | 'frontmatter.metadata.socialImage.modifiedTime'
  | 'frontmatter.metadata.socialImage.mtime'
  | 'frontmatter.metadata.socialImage.mtimeMs'
  | 'frontmatter.metadata.socialImage.name'
  | 'frontmatter.metadata.socialImage.nlink'
  | 'frontmatter.metadata.socialImage.prettySize'
  | 'frontmatter.metadata.socialImage.publicURL'
  | 'frontmatter.metadata.socialImage.rdev'
  | 'frontmatter.metadata.socialImage.relativeDirectory'
  | 'frontmatter.metadata.socialImage.relativePath'
  | 'frontmatter.metadata.socialImage.root'
  | 'frontmatter.metadata.socialImage.size'
  | 'frontmatter.metadata.socialImage.sourceInstanceName'
  | 'frontmatter.metadata.socialImage.uid'
  | 'frontmatter.metadata.title'
  | 'frontmatter.metadata.url'
  | 'frontmatter.name'
  | 'frontmatter.photo.absolutePath'
  | 'frontmatter.photo.accessTime'
  | 'frontmatter.photo.atime'
  | 'frontmatter.photo.atimeMs'
  | 'frontmatter.photo.base'
  | 'frontmatter.photo.birthTime'
  | 'frontmatter.photo.birthtime'
  | 'frontmatter.photo.birthtimeMs'
  | 'frontmatter.photo.blksize'
  | 'frontmatter.photo.blocks'
  | 'frontmatter.photo.changeTime'
  | 'frontmatter.photo.childImageSharp.children'
  | 'frontmatter.photo.childImageSharp.gatsbyImageData'
  | 'frontmatter.photo.childImageSharp.id'
  | 'frontmatter.photo.childMarkdownRemark.children'
  | 'frontmatter.photo.childMarkdownRemark.excerpt'
  | 'frontmatter.photo.childMarkdownRemark.excerptAst'
  | 'frontmatter.photo.childMarkdownRemark.fileAbsolutePath'
  | 'frontmatter.photo.childMarkdownRemark.headings'
  | 'frontmatter.photo.childMarkdownRemark.html'
  | 'frontmatter.photo.childMarkdownRemark.htmlAst'
  | 'frontmatter.photo.childMarkdownRemark.id'
  | 'frontmatter.photo.childMarkdownRemark.rawMarkdownBody'
  | 'frontmatter.photo.childMarkdownRemark.tableOfContents'
  | 'frontmatter.photo.childMarkdownRemark.timeToRead'
  | 'frontmatter.photo.childNotificationBarYaml.arrowText'
  | 'frontmatter.photo.childNotificationBarYaml.backgroundColor'
  | 'frontmatter.photo.childNotificationBarYaml.barBody'
  | 'frontmatter.photo.childNotificationBarYaml.children'
  | 'frontmatter.photo.childNotificationBarYaml.id'
  | 'frontmatter.photo.childNotificationBarYaml.openUrlNewTab'
  | 'frontmatter.photo.childNotificationBarYaml.showNotBar'
  | 'frontmatter.photo.childNotificationBarYaml.url'
  | 'frontmatter.photo.childTeamMembersYaml.children'
  | 'frontmatter.photo.childTeamMembersYaml.id'
  | 'frontmatter.photo.childTeamMembersYaml.totalMembers'
  | 'frontmatter.photo.children'
  | 'frontmatter.photo.childrenImageSharp'
  | 'frontmatter.photo.childrenImageSharp.children'
  | 'frontmatter.photo.childrenImageSharp.gatsbyImageData'
  | 'frontmatter.photo.childrenImageSharp.id'
  | 'frontmatter.photo.childrenMarkdownRemark'
  | 'frontmatter.photo.childrenMarkdownRemark.children'
  | 'frontmatter.photo.childrenMarkdownRemark.excerpt'
  | 'frontmatter.photo.childrenMarkdownRemark.excerptAst'
  | 'frontmatter.photo.childrenMarkdownRemark.fileAbsolutePath'
  | 'frontmatter.photo.childrenMarkdownRemark.headings'
  | 'frontmatter.photo.childrenMarkdownRemark.html'
  | 'frontmatter.photo.childrenMarkdownRemark.htmlAst'
  | 'frontmatter.photo.childrenMarkdownRemark.id'
  | 'frontmatter.photo.childrenMarkdownRemark.rawMarkdownBody'
  | 'frontmatter.photo.childrenMarkdownRemark.tableOfContents'
  | 'frontmatter.photo.childrenMarkdownRemark.timeToRead'
  | 'frontmatter.photo.childrenNotificationBarYaml'
  | 'frontmatter.photo.childrenNotificationBarYaml.arrowText'
  | 'frontmatter.photo.childrenNotificationBarYaml.backgroundColor'
  | 'frontmatter.photo.childrenNotificationBarYaml.barBody'
  | 'frontmatter.photo.childrenNotificationBarYaml.children'
  | 'frontmatter.photo.childrenNotificationBarYaml.id'
  | 'frontmatter.photo.childrenNotificationBarYaml.openUrlNewTab'
  | 'frontmatter.photo.childrenNotificationBarYaml.showNotBar'
  | 'frontmatter.photo.childrenNotificationBarYaml.url'
  | 'frontmatter.photo.childrenTeamMembersYaml'
  | 'frontmatter.photo.childrenTeamMembersYaml.children'
  | 'frontmatter.photo.childrenTeamMembersYaml.id'
  | 'frontmatter.photo.childrenTeamMembersYaml.totalMembers'
  | 'frontmatter.photo.children.children'
  | 'frontmatter.photo.children.id'
  | 'frontmatter.photo.ctime'
  | 'frontmatter.photo.ctimeMs'
  | 'frontmatter.photo.dev'
  | 'frontmatter.photo.dir'
  | 'frontmatter.photo.ext'
  | 'frontmatter.photo.extension'
  | 'frontmatter.photo.gid'
  | 'frontmatter.photo.hash'
  | 'frontmatter.photo.id'
  | 'frontmatter.photo.ino'
  | 'frontmatter.photo.internal.content'
  | 'frontmatter.photo.internal.contentDigest'
  | 'frontmatter.photo.internal.description'
  | 'frontmatter.photo.internal.fieldOwners'
  | 'frontmatter.photo.internal.ignoreType'
  | 'frontmatter.photo.internal.mediaType'
  | 'frontmatter.photo.internal.owner'
  | 'frontmatter.photo.internal.type'
  | 'frontmatter.photo.mode'
  | 'frontmatter.photo.modifiedTime'
  | 'frontmatter.photo.mtime'
  | 'frontmatter.photo.mtimeMs'
  | 'frontmatter.photo.name'
  | 'frontmatter.photo.nlink'
  | 'frontmatter.photo.parent.children'
  | 'frontmatter.photo.parent.id'
  | 'frontmatter.photo.prettySize'
  | 'frontmatter.photo.publicURL'
  | 'frontmatter.photo.rdev'
  | 'frontmatter.photo.relativeDirectory'
  | 'frontmatter.photo.relativePath'
  | 'frontmatter.photo.root'
  | 'frontmatter.photo.size'
  | 'frontmatter.photo.sourceInstanceName'
  | 'frontmatter.photo.uid'
  | 'frontmatter.publishDate'
  | 'frontmatter.relatedTitle'
  | 'frontmatter.role'
  | 'frontmatter.summary.overviewSection.bullets'
  | 'frontmatter.summary.overviewSection.description'
  | 'frontmatter.summary.results'
  | 'frontmatter.summary.results.children'
  | 'frontmatter.summary.results.content'
  | 'frontmatter.summary.results.iconAlt'
  | 'frontmatter.summary.results.iconTitle'
  | 'frontmatter.summary.results.id'
  | 'frontmatter.summary.results.title'
  | 'frontmatter.tags'
  | 'frontmatter.templateKey'
  | 'frontmatter.title'
  | 'frontmatter.useCaseCode.docsUrl'
  | 'frontmatter.useCaseCode.iframeUrl'
  | 'frontmatter.useCaseCode.shareUrl'
  | 'headings'
  | 'headings.depth'
  | 'headings.id'
  | 'headings.value'
  | 'html'
  | 'htmlAst'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'rawMarkdownBody'
  | 'socialCard.absolutePath'
  | 'socialCard.accessTime'
  | 'socialCard.atime'
  | 'socialCard.atimeMs'
  | 'socialCard.base'
  | 'socialCard.birthTime'
  | 'socialCard.birthtime'
  | 'socialCard.birthtimeMs'
  | 'socialCard.blksize'
  | 'socialCard.blocks'
  | 'socialCard.changeTime'
  | 'socialCard.childImageSharp.children'
  | 'socialCard.childImageSharp.children.children'
  | 'socialCard.childImageSharp.children.id'
  | 'socialCard.childImageSharp.fixed.aspectRatio'
  | 'socialCard.childImageSharp.fixed.base64'
  | 'socialCard.childImageSharp.fixed.height'
  | 'socialCard.childImageSharp.fixed.originalName'
  | 'socialCard.childImageSharp.fixed.src'
  | 'socialCard.childImageSharp.fixed.srcSet'
  | 'socialCard.childImageSharp.fixed.srcSetWebp'
  | 'socialCard.childImageSharp.fixed.srcWebp'
  | 'socialCard.childImageSharp.fixed.tracedSVG'
  | 'socialCard.childImageSharp.fixed.width'
  | 'socialCard.childImageSharp.fluid.aspectRatio'
  | 'socialCard.childImageSharp.fluid.base64'
  | 'socialCard.childImageSharp.fluid.originalImg'
  | 'socialCard.childImageSharp.fluid.originalName'
  | 'socialCard.childImageSharp.fluid.presentationHeight'
  | 'socialCard.childImageSharp.fluid.presentationWidth'
  | 'socialCard.childImageSharp.fluid.sizes'
  | 'socialCard.childImageSharp.fluid.src'
  | 'socialCard.childImageSharp.fluid.srcSet'
  | 'socialCard.childImageSharp.fluid.srcSetWebp'
  | 'socialCard.childImageSharp.fluid.srcWebp'
  | 'socialCard.childImageSharp.fluid.tracedSVG'
  | 'socialCard.childImageSharp.gatsbyImageData'
  | 'socialCard.childImageSharp.id'
  | 'socialCard.childImageSharp.internal.content'
  | 'socialCard.childImageSharp.internal.contentDigest'
  | 'socialCard.childImageSharp.internal.description'
  | 'socialCard.childImageSharp.internal.fieldOwners'
  | 'socialCard.childImageSharp.internal.ignoreType'
  | 'socialCard.childImageSharp.internal.mediaType'
  | 'socialCard.childImageSharp.internal.owner'
  | 'socialCard.childImageSharp.internal.type'
  | 'socialCard.childImageSharp.original.height'
  | 'socialCard.childImageSharp.original.src'
  | 'socialCard.childImageSharp.original.width'
  | 'socialCard.childImageSharp.parent.children'
  | 'socialCard.childImageSharp.parent.id'
  | 'socialCard.childImageSharp.resize.aspectRatio'
  | 'socialCard.childImageSharp.resize.height'
  | 'socialCard.childImageSharp.resize.originalName'
  | 'socialCard.childImageSharp.resize.src'
  | 'socialCard.childImageSharp.resize.tracedSVG'
  | 'socialCard.childImageSharp.resize.width'
  | 'socialCard.childMarkdownRemark.children'
  | 'socialCard.childMarkdownRemark.children.children'
  | 'socialCard.childMarkdownRemark.children.id'
  | 'socialCard.childMarkdownRemark.excerpt'
  | 'socialCard.childMarkdownRemark.excerptAst'
  | 'socialCard.childMarkdownRemark.fields.authors'
  | 'socialCard.childMarkdownRemark.fields.slug'
  | 'socialCard.childMarkdownRemark.fields.socialCardId'
  | 'socialCard.childMarkdownRemark.fileAbsolutePath'
  | 'socialCard.childMarkdownRemark.frontmatter.authors'
  | 'socialCard.childMarkdownRemark.frontmatter.bio'
  | 'socialCard.childMarkdownRemark.frontmatter.blocks'
  | 'socialCard.childMarkdownRemark.frontmatter.bottomLinks'
  | 'socialCard.childMarkdownRemark.frontmatter.category'
  | 'socialCard.childMarkdownRemark.frontmatter.description'
  | 'socialCard.childMarkdownRemark.frontmatter.featured'
  | 'socialCard.childMarkdownRemark.frontmatter.funnel'
  | 'socialCard.childMarkdownRemark.frontmatter.industry'
  | 'socialCard.childMarkdownRemark.frontmatter.invertContent'
  | 'socialCard.childMarkdownRemark.frontmatter.isHidden'
  | 'socialCard.childMarkdownRemark.frontmatter.isPublished'
  | 'socialCard.childMarkdownRemark.frontmatter.name'
  | 'socialCard.childMarkdownRemark.frontmatter.publishDate'
  | 'socialCard.childMarkdownRemark.frontmatter.relatedTitle'
  | 'socialCard.childMarkdownRemark.frontmatter.role'
  | 'socialCard.childMarkdownRemark.frontmatter.tags'
  | 'socialCard.childMarkdownRemark.frontmatter.templateKey'
  | 'socialCard.childMarkdownRemark.frontmatter.title'
  | 'socialCard.childMarkdownRemark.headings'
  | 'socialCard.childMarkdownRemark.headings.depth'
  | 'socialCard.childMarkdownRemark.headings.id'
  | 'socialCard.childMarkdownRemark.headings.value'
  | 'socialCard.childMarkdownRemark.html'
  | 'socialCard.childMarkdownRemark.htmlAst'
  | 'socialCard.childMarkdownRemark.id'
  | 'socialCard.childMarkdownRemark.internal.content'
  | 'socialCard.childMarkdownRemark.internal.contentDigest'
  | 'socialCard.childMarkdownRemark.internal.description'
  | 'socialCard.childMarkdownRemark.internal.fieldOwners'
  | 'socialCard.childMarkdownRemark.internal.ignoreType'
  | 'socialCard.childMarkdownRemark.internal.mediaType'
  | 'socialCard.childMarkdownRemark.internal.owner'
  | 'socialCard.childMarkdownRemark.internal.type'
  | 'socialCard.childMarkdownRemark.parent.children'
  | 'socialCard.childMarkdownRemark.parent.id'
  | 'socialCard.childMarkdownRemark.rawMarkdownBody'
  | 'socialCard.childMarkdownRemark.socialCard.absolutePath'
  | 'socialCard.childMarkdownRemark.socialCard.accessTime'
  | 'socialCard.childMarkdownRemark.socialCard.atime'
  | 'socialCard.childMarkdownRemark.socialCard.atimeMs'
  | 'socialCard.childMarkdownRemark.socialCard.base'
  | 'socialCard.childMarkdownRemark.socialCard.birthTime'
  | 'socialCard.childMarkdownRemark.socialCard.birthtime'
  | 'socialCard.childMarkdownRemark.socialCard.birthtimeMs'
  | 'socialCard.childMarkdownRemark.socialCard.blksize'
  | 'socialCard.childMarkdownRemark.socialCard.blocks'
  | 'socialCard.childMarkdownRemark.socialCard.changeTime'
  | 'socialCard.childMarkdownRemark.socialCard.children'
  | 'socialCard.childMarkdownRemark.socialCard.childrenImageSharp'
  | 'socialCard.childMarkdownRemark.socialCard.childrenMarkdownRemark'
  | 'socialCard.childMarkdownRemark.socialCard.childrenNotificationBarYaml'
  | 'socialCard.childMarkdownRemark.socialCard.childrenTeamMembersYaml'
  | 'socialCard.childMarkdownRemark.socialCard.ctime'
  | 'socialCard.childMarkdownRemark.socialCard.ctimeMs'
  | 'socialCard.childMarkdownRemark.socialCard.dev'
  | 'socialCard.childMarkdownRemark.socialCard.dir'
  | 'socialCard.childMarkdownRemark.socialCard.ext'
  | 'socialCard.childMarkdownRemark.socialCard.extension'
  | 'socialCard.childMarkdownRemark.socialCard.gid'
  | 'socialCard.childMarkdownRemark.socialCard.hash'
  | 'socialCard.childMarkdownRemark.socialCard.id'
  | 'socialCard.childMarkdownRemark.socialCard.ino'
  | 'socialCard.childMarkdownRemark.socialCard.mode'
  | 'socialCard.childMarkdownRemark.socialCard.modifiedTime'
  | 'socialCard.childMarkdownRemark.socialCard.mtime'
  | 'socialCard.childMarkdownRemark.socialCard.mtimeMs'
  | 'socialCard.childMarkdownRemark.socialCard.name'
  | 'socialCard.childMarkdownRemark.socialCard.nlink'
  | 'socialCard.childMarkdownRemark.socialCard.prettySize'
  | 'socialCard.childMarkdownRemark.socialCard.publicURL'
  | 'socialCard.childMarkdownRemark.socialCard.rdev'
  | 'socialCard.childMarkdownRemark.socialCard.relativeDirectory'
  | 'socialCard.childMarkdownRemark.socialCard.relativePath'
  | 'socialCard.childMarkdownRemark.socialCard.root'
  | 'socialCard.childMarkdownRemark.socialCard.size'
  | 'socialCard.childMarkdownRemark.socialCard.sourceInstanceName'
  | 'socialCard.childMarkdownRemark.socialCard.uid'
  | 'socialCard.childMarkdownRemark.tableOfContents'
  | 'socialCard.childMarkdownRemark.timeToRead'
  | 'socialCard.childMarkdownRemark.wordCount.paragraphs'
  | 'socialCard.childMarkdownRemark.wordCount.sentences'
  | 'socialCard.childMarkdownRemark.wordCount.words'
  | 'socialCard.childNotificationBarYaml.arrowText'
  | 'socialCard.childNotificationBarYaml.backgroundColor'
  | 'socialCard.childNotificationBarYaml.barBody'
  | 'socialCard.childNotificationBarYaml.children'
  | 'socialCard.childNotificationBarYaml.children.children'
  | 'socialCard.childNotificationBarYaml.children.id'
  | 'socialCard.childNotificationBarYaml.id'
  | 'socialCard.childNotificationBarYaml.internal.content'
  | 'socialCard.childNotificationBarYaml.internal.contentDigest'
  | 'socialCard.childNotificationBarYaml.internal.description'
  | 'socialCard.childNotificationBarYaml.internal.fieldOwners'
  | 'socialCard.childNotificationBarYaml.internal.ignoreType'
  | 'socialCard.childNotificationBarYaml.internal.mediaType'
  | 'socialCard.childNotificationBarYaml.internal.owner'
  | 'socialCard.childNotificationBarYaml.internal.type'
  | 'socialCard.childNotificationBarYaml.openUrlNewTab'
  | 'socialCard.childNotificationBarYaml.parent.children'
  | 'socialCard.childNotificationBarYaml.parent.id'
  | 'socialCard.childNotificationBarYaml.showNotBar'
  | 'socialCard.childNotificationBarYaml.url'
  | 'socialCard.childTeamMembersYaml.children'
  | 'socialCard.childTeamMembersYaml.children.children'
  | 'socialCard.childTeamMembersYaml.children.id'
  | 'socialCard.childTeamMembersYaml.id'
  | 'socialCard.childTeamMembersYaml.internal.content'
  | 'socialCard.childTeamMembersYaml.internal.contentDigest'
  | 'socialCard.childTeamMembersYaml.internal.description'
  | 'socialCard.childTeamMembersYaml.internal.fieldOwners'
  | 'socialCard.childTeamMembersYaml.internal.ignoreType'
  | 'socialCard.childTeamMembersYaml.internal.mediaType'
  | 'socialCard.childTeamMembersYaml.internal.owner'
  | 'socialCard.childTeamMembersYaml.internal.type'
  | 'socialCard.childTeamMembersYaml.parent.children'
  | 'socialCard.childTeamMembersYaml.parent.id'
  | 'socialCard.childTeamMembersYaml.totalMembers'
  | 'socialCard.children'
  | 'socialCard.childrenImageSharp'
  | 'socialCard.childrenImageSharp.children'
  | 'socialCard.childrenImageSharp.children.children'
  | 'socialCard.childrenImageSharp.children.id'
  | 'socialCard.childrenImageSharp.fixed.aspectRatio'
  | 'socialCard.childrenImageSharp.fixed.base64'
  | 'socialCard.childrenImageSharp.fixed.height'
  | 'socialCard.childrenImageSharp.fixed.originalName'
  | 'socialCard.childrenImageSharp.fixed.src'
  | 'socialCard.childrenImageSharp.fixed.srcSet'
  | 'socialCard.childrenImageSharp.fixed.srcSetWebp'
  | 'socialCard.childrenImageSharp.fixed.srcWebp'
  | 'socialCard.childrenImageSharp.fixed.tracedSVG'
  | 'socialCard.childrenImageSharp.fixed.width'
  | 'socialCard.childrenImageSharp.fluid.aspectRatio'
  | 'socialCard.childrenImageSharp.fluid.base64'
  | 'socialCard.childrenImageSharp.fluid.originalImg'
  | 'socialCard.childrenImageSharp.fluid.originalName'
  | 'socialCard.childrenImageSharp.fluid.presentationHeight'
  | 'socialCard.childrenImageSharp.fluid.presentationWidth'
  | 'socialCard.childrenImageSharp.fluid.sizes'
  | 'socialCard.childrenImageSharp.fluid.src'
  | 'socialCard.childrenImageSharp.fluid.srcSet'
  | 'socialCard.childrenImageSharp.fluid.srcSetWebp'
  | 'socialCard.childrenImageSharp.fluid.srcWebp'
  | 'socialCard.childrenImageSharp.fluid.tracedSVG'
  | 'socialCard.childrenImageSharp.gatsbyImageData'
  | 'socialCard.childrenImageSharp.id'
  | 'socialCard.childrenImageSharp.internal.content'
  | 'socialCard.childrenImageSharp.internal.contentDigest'
  | 'socialCard.childrenImageSharp.internal.description'
  | 'socialCard.childrenImageSharp.internal.fieldOwners'
  | 'socialCard.childrenImageSharp.internal.ignoreType'
  | 'socialCard.childrenImageSharp.internal.mediaType'
  | 'socialCard.childrenImageSharp.internal.owner'
  | 'socialCard.childrenImageSharp.internal.type'
  | 'socialCard.childrenImageSharp.original.height'
  | 'socialCard.childrenImageSharp.original.src'
  | 'socialCard.childrenImageSharp.original.width'
  | 'socialCard.childrenImageSharp.parent.children'
  | 'socialCard.childrenImageSharp.parent.id'
  | 'socialCard.childrenImageSharp.resize.aspectRatio'
  | 'socialCard.childrenImageSharp.resize.height'
  | 'socialCard.childrenImageSharp.resize.originalName'
  | 'socialCard.childrenImageSharp.resize.src'
  | 'socialCard.childrenImageSharp.resize.tracedSVG'
  | 'socialCard.childrenImageSharp.resize.width'
  | 'socialCard.childrenMarkdownRemark'
  | 'socialCard.childrenMarkdownRemark.children'
  | 'socialCard.childrenMarkdownRemark.children.children'
  | 'socialCard.childrenMarkdownRemark.children.id'
  | 'socialCard.childrenMarkdownRemark.excerpt'
  | 'socialCard.childrenMarkdownRemark.excerptAst'
  | 'socialCard.childrenMarkdownRemark.fields.authors'
  | 'socialCard.childrenMarkdownRemark.fields.slug'
  | 'socialCard.childrenMarkdownRemark.fields.socialCardId'
  | 'socialCard.childrenMarkdownRemark.fileAbsolutePath'
  | 'socialCard.childrenMarkdownRemark.frontmatter.authors'
  | 'socialCard.childrenMarkdownRemark.frontmatter.bio'
  | 'socialCard.childrenMarkdownRemark.frontmatter.blocks'
  | 'socialCard.childrenMarkdownRemark.frontmatter.bottomLinks'
  | 'socialCard.childrenMarkdownRemark.frontmatter.category'
  | 'socialCard.childrenMarkdownRemark.frontmatter.description'
  | 'socialCard.childrenMarkdownRemark.frontmatter.featured'
  | 'socialCard.childrenMarkdownRemark.frontmatter.funnel'
  | 'socialCard.childrenMarkdownRemark.frontmatter.industry'
  | 'socialCard.childrenMarkdownRemark.frontmatter.invertContent'
  | 'socialCard.childrenMarkdownRemark.frontmatter.isHidden'
  | 'socialCard.childrenMarkdownRemark.frontmatter.isPublished'
  | 'socialCard.childrenMarkdownRemark.frontmatter.name'
  | 'socialCard.childrenMarkdownRemark.frontmatter.publishDate'
  | 'socialCard.childrenMarkdownRemark.frontmatter.relatedTitle'
  | 'socialCard.childrenMarkdownRemark.frontmatter.role'
  | 'socialCard.childrenMarkdownRemark.frontmatter.tags'
  | 'socialCard.childrenMarkdownRemark.frontmatter.templateKey'
  | 'socialCard.childrenMarkdownRemark.frontmatter.title'
  | 'socialCard.childrenMarkdownRemark.headings'
  | 'socialCard.childrenMarkdownRemark.headings.depth'
  | 'socialCard.childrenMarkdownRemark.headings.id'
  | 'socialCard.childrenMarkdownRemark.headings.value'
  | 'socialCard.childrenMarkdownRemark.html'
  | 'socialCard.childrenMarkdownRemark.htmlAst'
  | 'socialCard.childrenMarkdownRemark.id'
  | 'socialCard.childrenMarkdownRemark.internal.content'
  | 'socialCard.childrenMarkdownRemark.internal.contentDigest'
  | 'socialCard.childrenMarkdownRemark.internal.description'
  | 'socialCard.childrenMarkdownRemark.internal.fieldOwners'
  | 'socialCard.childrenMarkdownRemark.internal.ignoreType'
  | 'socialCard.childrenMarkdownRemark.internal.mediaType'
  | 'socialCard.childrenMarkdownRemark.internal.owner'
  | 'socialCard.childrenMarkdownRemark.internal.type'
  | 'socialCard.childrenMarkdownRemark.parent.children'
  | 'socialCard.childrenMarkdownRemark.parent.id'
  | 'socialCard.childrenMarkdownRemark.rawMarkdownBody'
  | 'socialCard.childrenMarkdownRemark.socialCard.absolutePath'
  | 'socialCard.childrenMarkdownRemark.socialCard.accessTime'
  | 'socialCard.childrenMarkdownRemark.socialCard.atime'
  | 'socialCard.childrenMarkdownRemark.socialCard.atimeMs'
  | 'socialCard.childrenMarkdownRemark.socialCard.base'
  | 'socialCard.childrenMarkdownRemark.socialCard.birthTime'
  | 'socialCard.childrenMarkdownRemark.socialCard.birthtime'
  | 'socialCard.childrenMarkdownRemark.socialCard.birthtimeMs'
  | 'socialCard.childrenMarkdownRemark.socialCard.blksize'
  | 'socialCard.childrenMarkdownRemark.socialCard.blocks'
  | 'socialCard.childrenMarkdownRemark.socialCard.changeTime'
  | 'socialCard.childrenMarkdownRemark.socialCard.children'
  | 'socialCard.childrenMarkdownRemark.socialCard.childrenImageSharp'
  | 'socialCard.childrenMarkdownRemark.socialCard.childrenMarkdownRemark'
  | 'socialCard.childrenMarkdownRemark.socialCard.childrenNotificationBarYaml'
  | 'socialCard.childrenMarkdownRemark.socialCard.childrenTeamMembersYaml'
  | 'socialCard.childrenMarkdownRemark.socialCard.ctime'
  | 'socialCard.childrenMarkdownRemark.socialCard.ctimeMs'
  | 'socialCard.childrenMarkdownRemark.socialCard.dev'
  | 'socialCard.childrenMarkdownRemark.socialCard.dir'
  | 'socialCard.childrenMarkdownRemark.socialCard.ext'
  | 'socialCard.childrenMarkdownRemark.socialCard.extension'
  | 'socialCard.childrenMarkdownRemark.socialCard.gid'
  | 'socialCard.childrenMarkdownRemark.socialCard.hash'
  | 'socialCard.childrenMarkdownRemark.socialCard.id'
  | 'socialCard.childrenMarkdownRemark.socialCard.ino'
  | 'socialCard.childrenMarkdownRemark.socialCard.mode'
  | 'socialCard.childrenMarkdownRemark.socialCard.modifiedTime'
  | 'socialCard.childrenMarkdownRemark.socialCard.mtime'
  | 'socialCard.childrenMarkdownRemark.socialCard.mtimeMs'
  | 'socialCard.childrenMarkdownRemark.socialCard.name'
  | 'socialCard.childrenMarkdownRemark.socialCard.nlink'
  | 'socialCard.childrenMarkdownRemark.socialCard.prettySize'
  | 'socialCard.childrenMarkdownRemark.socialCard.publicURL'
  | 'socialCard.childrenMarkdownRemark.socialCard.rdev'
  | 'socialCard.childrenMarkdownRemark.socialCard.relativeDirectory'
  | 'socialCard.childrenMarkdownRemark.socialCard.relativePath'
  | 'socialCard.childrenMarkdownRemark.socialCard.root'
  | 'socialCard.childrenMarkdownRemark.socialCard.size'
  | 'socialCard.childrenMarkdownRemark.socialCard.sourceInstanceName'
  | 'socialCard.childrenMarkdownRemark.socialCard.uid'
  | 'socialCard.childrenMarkdownRemark.tableOfContents'
  | 'socialCard.childrenMarkdownRemark.timeToRead'
  | 'socialCard.childrenMarkdownRemark.wordCount.paragraphs'
  | 'socialCard.childrenMarkdownRemark.wordCount.sentences'
  | 'socialCard.childrenMarkdownRemark.wordCount.words'
  | 'socialCard.childrenNotificationBarYaml'
  | 'socialCard.childrenNotificationBarYaml.arrowText'
  | 'socialCard.childrenNotificationBarYaml.backgroundColor'
  | 'socialCard.childrenNotificationBarYaml.barBody'
  | 'socialCard.childrenNotificationBarYaml.children'
  | 'socialCard.childrenNotificationBarYaml.children.children'
  | 'socialCard.childrenNotificationBarYaml.children.id'
  | 'socialCard.childrenNotificationBarYaml.id'
  | 'socialCard.childrenNotificationBarYaml.internal.content'
  | 'socialCard.childrenNotificationBarYaml.internal.contentDigest'
  | 'socialCard.childrenNotificationBarYaml.internal.description'
  | 'socialCard.childrenNotificationBarYaml.internal.fieldOwners'
  | 'socialCard.childrenNotificationBarYaml.internal.ignoreType'
  | 'socialCard.childrenNotificationBarYaml.internal.mediaType'
  | 'socialCard.childrenNotificationBarYaml.internal.owner'
  | 'socialCard.childrenNotificationBarYaml.internal.type'
  | 'socialCard.childrenNotificationBarYaml.openUrlNewTab'
  | 'socialCard.childrenNotificationBarYaml.parent.children'
  | 'socialCard.childrenNotificationBarYaml.parent.id'
  | 'socialCard.childrenNotificationBarYaml.showNotBar'
  | 'socialCard.childrenNotificationBarYaml.url'
  | 'socialCard.childrenTeamMembersYaml'
  | 'socialCard.childrenTeamMembersYaml.children'
  | 'socialCard.childrenTeamMembersYaml.children.children'
  | 'socialCard.childrenTeamMembersYaml.children.id'
  | 'socialCard.childrenTeamMembersYaml.id'
  | 'socialCard.childrenTeamMembersYaml.internal.content'
  | 'socialCard.childrenTeamMembersYaml.internal.contentDigest'
  | 'socialCard.childrenTeamMembersYaml.internal.description'
  | 'socialCard.childrenTeamMembersYaml.internal.fieldOwners'
  | 'socialCard.childrenTeamMembersYaml.internal.ignoreType'
  | 'socialCard.childrenTeamMembersYaml.internal.mediaType'
  | 'socialCard.childrenTeamMembersYaml.internal.owner'
  | 'socialCard.childrenTeamMembersYaml.internal.type'
  | 'socialCard.childrenTeamMembersYaml.parent.children'
  | 'socialCard.childrenTeamMembersYaml.parent.id'
  | 'socialCard.childrenTeamMembersYaml.totalMembers'
  | 'socialCard.children.children'
  | 'socialCard.children.children.children'
  | 'socialCard.children.children.id'
  | 'socialCard.children.id'
  | 'socialCard.children.internal.content'
  | 'socialCard.children.internal.contentDigest'
  | 'socialCard.children.internal.description'
  | 'socialCard.children.internal.fieldOwners'
  | 'socialCard.children.internal.ignoreType'
  | 'socialCard.children.internal.mediaType'
  | 'socialCard.children.internal.owner'
  | 'socialCard.children.internal.type'
  | 'socialCard.children.parent.children'
  | 'socialCard.children.parent.id'
  | 'socialCard.ctime'
  | 'socialCard.ctimeMs'
  | 'socialCard.dev'
  | 'socialCard.dir'
  | 'socialCard.ext'
  | 'socialCard.extension'
  | 'socialCard.gid'
  | 'socialCard.hash'
  | 'socialCard.id'
  | 'socialCard.ino'
  | 'socialCard.internal.content'
  | 'socialCard.internal.contentDigest'
  | 'socialCard.internal.description'
  | 'socialCard.internal.fieldOwners'
  | 'socialCard.internal.ignoreType'
  | 'socialCard.internal.mediaType'
  | 'socialCard.internal.owner'
  | 'socialCard.internal.type'
  | 'socialCard.mode'
  | 'socialCard.modifiedTime'
  | 'socialCard.mtime'
  | 'socialCard.mtimeMs'
  | 'socialCard.name'
  | 'socialCard.nlink'
  | 'socialCard.parent.children'
  | 'socialCard.parent.children.children'
  | 'socialCard.parent.children.id'
  | 'socialCard.parent.id'
  | 'socialCard.parent.internal.content'
  | 'socialCard.parent.internal.contentDigest'
  | 'socialCard.parent.internal.description'
  | 'socialCard.parent.internal.fieldOwners'
  | 'socialCard.parent.internal.ignoreType'
  | 'socialCard.parent.internal.mediaType'
  | 'socialCard.parent.internal.owner'
  | 'socialCard.parent.internal.type'
  | 'socialCard.parent.parent.children'
  | 'socialCard.parent.parent.id'
  | 'socialCard.prettySize'
  | 'socialCard.publicURL'
  | 'socialCard.rdev'
  | 'socialCard.relativeDirectory'
  | 'socialCard.relativePath'
  | 'socialCard.root'
  | 'socialCard.size'
  | 'socialCard.sourceInstanceName'
  | 'socialCard.uid'
  | 'tableOfContents'
  | 'timeToRead'
  | 'wordCount.paragraphs'
  | 'wordCount.sentences'
  | 'wordCount.words';

type MarkdownRemarkFieldsFilterInput = {
  readonly authors: InputMaybe<MarkdownRemarkFieldsAuthorsFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly socialCardId: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly fields: InputMaybe<MarkdownRemarkFieldsFilterInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly socialCard: InputMaybe<FileFilterInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly authors: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly bio: Maybe<Scalars['String']>;
  readonly blocks: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterBlocks>>>;
  readonly bottomLinks: Maybe<ReadonlyArray<Maybe<BottomLink>>>;
  readonly cardSection: Maybe<CardSection>;
  readonly category: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly customCTA: Maybe<MarkdownRemarkFrontmatterCustomCTA>;
  readonly description: Maybe<Scalars['String']>;
  readonly featured: Maybe<Scalars['Boolean']>;
  readonly footer: Maybe<MarkdownRemarkFrontmatterFooter>;
  readonly funnel: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly header: Maybe<Header>;
  readonly hero: Maybe<MarkdownRemarkFrontmatterHero>;
  readonly heroImage: Maybe<MarkdownRemarkFrontmatterHeroImage>;
  readonly industry: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly inlineCta: Maybe<InlineCta>;
  readonly invertContent: Scalars['Boolean'];
  readonly isHidden: Maybe<Scalars['Boolean']>;
  readonly isPublished: Maybe<Scalars['Boolean']>;
  readonly metadata: Maybe<MarkdownRemarkFrontmatterMetadata>;
  readonly name: Maybe<Scalars['String']>;
  readonly photo: Maybe<File>;
  readonly publishDate: Maybe<Scalars['Date']>;
  readonly relatedTitle: Scalars['String'];
  readonly role: Maybe<Scalars['String']>;
  readonly summary: Maybe<Summary>;
  readonly tags: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly templateKey: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly useCaseCode: Maybe<MarkdownRemarkFrontmatterUseCaseCode>;
};


type MarkdownRemarkFrontmatter_publishDateArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterBlocks = {
  readonly content: Maybe<Scalars['String']>;
  readonly ctaText: Maybe<Scalars['String']>;
  readonly ctaUrl: Maybe<Scalars['String']>;
  readonly image: Maybe<File>;
  readonly imageAlt: Maybe<Scalars['String']>;
  readonly imageTitle: Maybe<Scalars['String']>;
  readonly isCtaButton: Maybe<Scalars['Boolean']>;
  readonly isImageAfterText: Maybe<Scalars['Boolean']>;
  readonly subheader: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterBlocksFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly ctaText: InputMaybe<StringQueryOperatorInput>;
  readonly ctaUrl: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly imageAlt: InputMaybe<StringQueryOperatorInput>;
  readonly imageTitle: InputMaybe<StringQueryOperatorInput>;
  readonly isCtaButton: InputMaybe<BooleanQueryOperatorInput>;
  readonly isImageAfterText: InputMaybe<BooleanQueryOperatorInput>;
  readonly subheader: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterBlocksFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterBlocksFilterInput>;
};

type MarkdownRemarkFrontmatterCustomCTA = {
  readonly ctaText: Maybe<Scalars['String']>;
  readonly ctaUrl: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly isPublished: Maybe<Scalars['Boolean']>;
  readonly openCtaNewTab: Maybe<Scalars['Boolean']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterCustomCTAFilterInput = {
  readonly ctaText: InputMaybe<StringQueryOperatorInput>;
  readonly ctaUrl: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly isPublished: InputMaybe<BooleanQueryOperatorInput>;
  readonly openCtaNewTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly authors: InputMaybe<StringQueryOperatorInput>;
  readonly bio: InputMaybe<StringQueryOperatorInput>;
  readonly blocks: InputMaybe<MarkdownRemarkFrontmatterBlocksFilterListInput>;
  readonly bottomLinks: InputMaybe<BottomLinkFilterListInput>;
  readonly cardSection: InputMaybe<CardSectionFilterInput>;
  readonly category: InputMaybe<StringQueryOperatorInput>;
  readonly customCTA: InputMaybe<MarkdownRemarkFrontmatterCustomCTAFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly featured: InputMaybe<BooleanQueryOperatorInput>;
  readonly footer: InputMaybe<MarkdownRemarkFrontmatterFooterFilterInput>;
  readonly funnel: InputMaybe<StringQueryOperatorInput>;
  readonly header: InputMaybe<HeaderFilterInput>;
  readonly hero: InputMaybe<MarkdownRemarkFrontmatterHeroFilterInput>;
  readonly heroImage: InputMaybe<MarkdownRemarkFrontmatterHeroImageFilterInput>;
  readonly industry: InputMaybe<StringQueryOperatorInput>;
  readonly inlineCta: InputMaybe<InlineCtaFilterInput>;
  readonly invertContent: InputMaybe<BooleanQueryOperatorInput>;
  readonly isHidden: InputMaybe<BooleanQueryOperatorInput>;
  readonly isPublished: InputMaybe<BooleanQueryOperatorInput>;
  readonly metadata: InputMaybe<MarkdownRemarkFrontmatterMetadataFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly photo: InputMaybe<FileFilterInput>;
  readonly publishDate: InputMaybe<DateQueryOperatorInput>;
  readonly relatedTitle: InputMaybe<StringQueryOperatorInput>;
  readonly role: InputMaybe<StringQueryOperatorInput>;
  readonly summary: InputMaybe<SummaryFilterInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly templateKey: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly useCaseCode: InputMaybe<MarkdownRemarkFrontmatterUseCaseCodeFilterInput>;
};

type MarkdownRemarkFrontmatterFooter = {
  readonly ctaSubtitle: Maybe<Scalars['String']>;
  readonly ctaTitle: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFooterFilterInput = {
  readonly ctaSubtitle: InputMaybe<StringQueryOperatorInput>;
  readonly ctaTitle: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHero = {
  readonly ctaHref: Maybe<Scalars['String']>;
  readonly ctaText: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly openCtaNewTab: Maybe<Scalars['Boolean']>;
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHeroFilterInput = {
  readonly ctaHref: InputMaybe<StringQueryOperatorInput>;
  readonly ctaText: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly openCtaNewTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterHeroImage = {
  readonly image: Maybe<File>;
  readonly imageAlt: Maybe<Scalars['String']>;
  readonly imageTitle: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterHeroImageFilterInput = {
  readonly image: InputMaybe<FileFilterInput>;
  readonly imageAlt: InputMaybe<StringQueryOperatorInput>;
  readonly imageTitle: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<File>;
  readonly imageAlt: Maybe<Scalars['String']>;
  readonly imageTitle: Maybe<Scalars['String']>;
  readonly socialImage: Maybe<File>;
  readonly title: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<FileFilterInput>;
  readonly imageAlt: InputMaybe<StringQueryOperatorInput>;
  readonly imageTitle: InputMaybe<StringQueryOperatorInput>;
  readonly socialImage: InputMaybe<FileFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterSummaryOverviewSection = {
  readonly bullets: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterSummaryOverviewSectionBullets>>>;
  readonly description: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterSummaryOverviewSectionBullets = {
  readonly description: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterSummaryOverviewSectionBulletsFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterSummaryOverviewSectionBulletsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterSummaryOverviewSectionBulletsFilterInput>;
};

type MarkdownRemarkFrontmatterSummaryOverviewSectionFilterInput = {
  readonly bullets: InputMaybe<MarkdownRemarkFrontmatterSummaryOverviewSectionBulletsFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterUseCaseCode = {
  readonly docsUrl: Maybe<Scalars['String']>;
  readonly iframeUrl: Maybe<Scalars['String']>;
  readonly shareUrl: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterUseCaseCodeFilterInput = {
  readonly docsUrl: InputMaybe<StringQueryOperatorInput>;
  readonly iframeUrl: InputMaybe<StringQueryOperatorInput>;
  readonly shareUrl: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldsEnum;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldsEnum;
};

type MarkdownRemarkSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NotificationBarYaml = Node & {
  readonly arrowText: Maybe<Scalars['String']>;
  readonly backgroundColor: Maybe<Scalars['String']>;
  readonly barBody: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly openUrlNewTab: Maybe<Scalars['Boolean']>;
  readonly parent: Maybe<Node>;
  readonly showNotBar: Maybe<Scalars['Boolean']>;
  readonly url: Maybe<Scalars['String']>;
};

type NotificationBarYamlConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<NotificationBarYamlEdge>;
  readonly group: ReadonlyArray<NotificationBarYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<NotificationBarYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type NotificationBarYamlConnection_distinctArgs = {
  field: NotificationBarYamlFieldsEnum;
};


type NotificationBarYamlConnection_groupArgs = {
  field: NotificationBarYamlFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type NotificationBarYamlConnection_maxArgs = {
  field: NotificationBarYamlFieldsEnum;
};


type NotificationBarYamlConnection_minArgs = {
  field: NotificationBarYamlFieldsEnum;
};


type NotificationBarYamlConnection_sumArgs = {
  field: NotificationBarYamlFieldsEnum;
};

type NotificationBarYamlEdge = {
  readonly next: Maybe<NotificationBarYaml>;
  readonly node: NotificationBarYaml;
  readonly previous: Maybe<NotificationBarYaml>;
};

type NotificationBarYamlFieldsEnum =
  | 'arrowText'
  | 'backgroundColor'
  | 'barBody'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'openUrlNewTab'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'showNotBar'
  | 'url';

type NotificationBarYamlFilterInput = {
  readonly arrowText: InputMaybe<StringQueryOperatorInput>;
  readonly backgroundColor: InputMaybe<StringQueryOperatorInput>;
  readonly barBody: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly openUrlNewTab: InputMaybe<BooleanQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly showNotBar: InputMaybe<BooleanQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotificationBarYamlFilterListInput = {
  readonly elemMatch: InputMaybe<NotificationBarYamlFilterInput>;
};

type NotificationBarYamlGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<NotificationBarYamlEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<NotificationBarYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<NotificationBarYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type NotificationBarYamlGroupConnection_distinctArgs = {
  field: NotificationBarYamlFieldsEnum;
};


type NotificationBarYamlGroupConnection_groupArgs = {
  field: NotificationBarYamlFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type NotificationBarYamlGroupConnection_maxArgs = {
  field: NotificationBarYamlFieldsEnum;
};


type NotificationBarYamlGroupConnection_minArgs = {
  field: NotificationBarYamlFieldsEnum;
};


type NotificationBarYamlGroupConnection_sumArgs = {
  field: NotificationBarYamlFieldsEnum;
};

type NotificationBarYamlSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<NotificationBarYamlFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allApiPrice: API_PriceConnection;
  readonly allBlocks: BlocksConnection;
  readonly allCards: CardsConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allNotificationBarYaml: NotificationBarYamlConnection;
  readonly allResults: ResultsConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allTeamMembersYaml: TeamMembersYamlConnection;
  readonly apiPrice: Maybe<API_Price>;
  readonly blocks: Maybe<Blocks>;
  readonly cards: Maybe<Cards>;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly notificationBarYaml: Maybe<NotificationBarYaml>;
  readonly results: Maybe<Results>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly teamMembersYaml: Maybe<TeamMembersYaml>;
};


type Query_allApiPriceArgs = {
  filter: InputMaybe<API_PriceFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<API_PriceSortInput>;
};


type Query_allBlocksArgs = {
  filter: InputMaybe<BlocksFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<BlocksSortInput>;
};


type Query_allCardsArgs = {
  filter: InputMaybe<CardsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<CardsSortInput>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<DirectorySortInput>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<FileSortInput>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ImageSharpSortInput>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<MarkdownRemarkSortInput>;
};


type Query_allNotificationBarYamlArgs = {
  filter: InputMaybe<NotificationBarYamlFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<NotificationBarYamlSortInput>;
};


type Query_allResultsArgs = {
  filter: InputMaybe<ResultsFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ResultsSortInput>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteSortInput>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteBuildMetadataSortInput>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SiteFunctionSortInput>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePageSortInput>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<SitePluginSortInput>;
};


type Query_allTeamMembersYamlArgs = {
  filter: InputMaybe<TeamMembersYamlFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<TeamMembersYamlSortInput>;
};


type Query_apiPriceArgs = {
  children: InputMaybe<NodeFilterListInput>;
  flatAmount: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  overagePrice: InputMaybe<FloatQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prepaidQuantity: InputMaybe<IntQueryOperatorInput>;
};


type Query_blocksArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_cardsArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<FileFilterInput>;
  iconAlt: InputMaybe<StringQueryOperatorInput>;
  iconTitle: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  childNotificationBarYaml: InputMaybe<NotificationBarYamlFilterInput>;
  childTeamMembersYaml: InputMaybe<TeamMembersYamlFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  childrenNotificationBarYaml: InputMaybe<NotificationBarYamlFilterListInput>;
  childrenTeamMembersYaml: InputMaybe<TeamMembersYamlFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  fields: InputMaybe<MarkdownRemarkFieldsFilterInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  socialCard: InputMaybe<FileFilterInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_notificationBarYamlArgs = {
  arrowText: InputMaybe<StringQueryOperatorInput>;
  backgroundColor: InputMaybe<StringQueryOperatorInput>;
  barBody: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  openUrlNewTab: InputMaybe<BooleanQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  showNotBar: InputMaybe<BooleanQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_resultsArgs = {
  children: InputMaybe<NodeFilterListInput>;
  content: InputMaybe<StringQueryOperatorInput>;
  icon: InputMaybe<FileFilterInput>;
  iconAlt: InputMaybe<StringQueryOperatorInput>;
  iconTitle: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  mapping: InputMaybe<SiteMappingFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  context: InputMaybe<SitePageContextFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_teamMembersYamlArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  totalMembers: InputMaybe<IntQueryOperatorInput>;
};

type Results = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly content: Maybe<Scalars['String']>;
  readonly icon: Maybe<File>;
  readonly iconAlt: Maybe<Scalars['String']>;
  readonly iconTitle: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly title: Maybe<Scalars['String']>;
};

type ResultsConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ResultsEdge>;
  readonly group: ReadonlyArray<ResultsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Results>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ResultsConnection_distinctArgs = {
  field: ResultsFieldsEnum;
};


type ResultsConnection_groupArgs = {
  field: ResultsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ResultsConnection_maxArgs = {
  field: ResultsFieldsEnum;
};


type ResultsConnection_minArgs = {
  field: ResultsFieldsEnum;
};


type ResultsConnection_sumArgs = {
  field: ResultsFieldsEnum;
};

type ResultsEdge = {
  readonly next: Maybe<Results>;
  readonly node: Results;
  readonly previous: Maybe<Results>;
};

type ResultsFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'content'
  | 'iconAlt'
  | 'iconTitle'
  | 'icon.absolutePath'
  | 'icon.accessTime'
  | 'icon.atime'
  | 'icon.atimeMs'
  | 'icon.base'
  | 'icon.birthTime'
  | 'icon.birthtime'
  | 'icon.birthtimeMs'
  | 'icon.blksize'
  | 'icon.blocks'
  | 'icon.changeTime'
  | 'icon.childImageSharp.children'
  | 'icon.childImageSharp.children.children'
  | 'icon.childImageSharp.children.id'
  | 'icon.childImageSharp.fixed.aspectRatio'
  | 'icon.childImageSharp.fixed.base64'
  | 'icon.childImageSharp.fixed.height'
  | 'icon.childImageSharp.fixed.originalName'
  | 'icon.childImageSharp.fixed.src'
  | 'icon.childImageSharp.fixed.srcSet'
  | 'icon.childImageSharp.fixed.srcSetWebp'
  | 'icon.childImageSharp.fixed.srcWebp'
  | 'icon.childImageSharp.fixed.tracedSVG'
  | 'icon.childImageSharp.fixed.width'
  | 'icon.childImageSharp.fluid.aspectRatio'
  | 'icon.childImageSharp.fluid.base64'
  | 'icon.childImageSharp.fluid.originalImg'
  | 'icon.childImageSharp.fluid.originalName'
  | 'icon.childImageSharp.fluid.presentationHeight'
  | 'icon.childImageSharp.fluid.presentationWidth'
  | 'icon.childImageSharp.fluid.sizes'
  | 'icon.childImageSharp.fluid.src'
  | 'icon.childImageSharp.fluid.srcSet'
  | 'icon.childImageSharp.fluid.srcSetWebp'
  | 'icon.childImageSharp.fluid.srcWebp'
  | 'icon.childImageSharp.fluid.tracedSVG'
  | 'icon.childImageSharp.gatsbyImageData'
  | 'icon.childImageSharp.id'
  | 'icon.childImageSharp.internal.content'
  | 'icon.childImageSharp.internal.contentDigest'
  | 'icon.childImageSharp.internal.description'
  | 'icon.childImageSharp.internal.fieldOwners'
  | 'icon.childImageSharp.internal.ignoreType'
  | 'icon.childImageSharp.internal.mediaType'
  | 'icon.childImageSharp.internal.owner'
  | 'icon.childImageSharp.internal.type'
  | 'icon.childImageSharp.original.height'
  | 'icon.childImageSharp.original.src'
  | 'icon.childImageSharp.original.width'
  | 'icon.childImageSharp.parent.children'
  | 'icon.childImageSharp.parent.id'
  | 'icon.childImageSharp.resize.aspectRatio'
  | 'icon.childImageSharp.resize.height'
  | 'icon.childImageSharp.resize.originalName'
  | 'icon.childImageSharp.resize.src'
  | 'icon.childImageSharp.resize.tracedSVG'
  | 'icon.childImageSharp.resize.width'
  | 'icon.childMarkdownRemark.children'
  | 'icon.childMarkdownRemark.children.children'
  | 'icon.childMarkdownRemark.children.id'
  | 'icon.childMarkdownRemark.excerpt'
  | 'icon.childMarkdownRemark.excerptAst'
  | 'icon.childMarkdownRemark.fields.authors'
  | 'icon.childMarkdownRemark.fields.slug'
  | 'icon.childMarkdownRemark.fields.socialCardId'
  | 'icon.childMarkdownRemark.fileAbsolutePath'
  | 'icon.childMarkdownRemark.frontmatter.authors'
  | 'icon.childMarkdownRemark.frontmatter.bio'
  | 'icon.childMarkdownRemark.frontmatter.blocks'
  | 'icon.childMarkdownRemark.frontmatter.bottomLinks'
  | 'icon.childMarkdownRemark.frontmatter.category'
  | 'icon.childMarkdownRemark.frontmatter.description'
  | 'icon.childMarkdownRemark.frontmatter.featured'
  | 'icon.childMarkdownRemark.frontmatter.funnel'
  | 'icon.childMarkdownRemark.frontmatter.industry'
  | 'icon.childMarkdownRemark.frontmatter.invertContent'
  | 'icon.childMarkdownRemark.frontmatter.isHidden'
  | 'icon.childMarkdownRemark.frontmatter.isPublished'
  | 'icon.childMarkdownRemark.frontmatter.name'
  | 'icon.childMarkdownRemark.frontmatter.publishDate'
  | 'icon.childMarkdownRemark.frontmatter.relatedTitle'
  | 'icon.childMarkdownRemark.frontmatter.role'
  | 'icon.childMarkdownRemark.frontmatter.tags'
  | 'icon.childMarkdownRemark.frontmatter.templateKey'
  | 'icon.childMarkdownRemark.frontmatter.title'
  | 'icon.childMarkdownRemark.headings'
  | 'icon.childMarkdownRemark.headings.depth'
  | 'icon.childMarkdownRemark.headings.id'
  | 'icon.childMarkdownRemark.headings.value'
  | 'icon.childMarkdownRemark.html'
  | 'icon.childMarkdownRemark.htmlAst'
  | 'icon.childMarkdownRemark.id'
  | 'icon.childMarkdownRemark.internal.content'
  | 'icon.childMarkdownRemark.internal.contentDigest'
  | 'icon.childMarkdownRemark.internal.description'
  | 'icon.childMarkdownRemark.internal.fieldOwners'
  | 'icon.childMarkdownRemark.internal.ignoreType'
  | 'icon.childMarkdownRemark.internal.mediaType'
  | 'icon.childMarkdownRemark.internal.owner'
  | 'icon.childMarkdownRemark.internal.type'
  | 'icon.childMarkdownRemark.parent.children'
  | 'icon.childMarkdownRemark.parent.id'
  | 'icon.childMarkdownRemark.rawMarkdownBody'
  | 'icon.childMarkdownRemark.socialCard.absolutePath'
  | 'icon.childMarkdownRemark.socialCard.accessTime'
  | 'icon.childMarkdownRemark.socialCard.atime'
  | 'icon.childMarkdownRemark.socialCard.atimeMs'
  | 'icon.childMarkdownRemark.socialCard.base'
  | 'icon.childMarkdownRemark.socialCard.birthTime'
  | 'icon.childMarkdownRemark.socialCard.birthtime'
  | 'icon.childMarkdownRemark.socialCard.birthtimeMs'
  | 'icon.childMarkdownRemark.socialCard.blksize'
  | 'icon.childMarkdownRemark.socialCard.blocks'
  | 'icon.childMarkdownRemark.socialCard.changeTime'
  | 'icon.childMarkdownRemark.socialCard.children'
  | 'icon.childMarkdownRemark.socialCard.childrenImageSharp'
  | 'icon.childMarkdownRemark.socialCard.childrenMarkdownRemark'
  | 'icon.childMarkdownRemark.socialCard.childrenNotificationBarYaml'
  | 'icon.childMarkdownRemark.socialCard.childrenTeamMembersYaml'
  | 'icon.childMarkdownRemark.socialCard.ctime'
  | 'icon.childMarkdownRemark.socialCard.ctimeMs'
  | 'icon.childMarkdownRemark.socialCard.dev'
  | 'icon.childMarkdownRemark.socialCard.dir'
  | 'icon.childMarkdownRemark.socialCard.ext'
  | 'icon.childMarkdownRemark.socialCard.extension'
  | 'icon.childMarkdownRemark.socialCard.gid'
  | 'icon.childMarkdownRemark.socialCard.hash'
  | 'icon.childMarkdownRemark.socialCard.id'
  | 'icon.childMarkdownRemark.socialCard.ino'
  | 'icon.childMarkdownRemark.socialCard.mode'
  | 'icon.childMarkdownRemark.socialCard.modifiedTime'
  | 'icon.childMarkdownRemark.socialCard.mtime'
  | 'icon.childMarkdownRemark.socialCard.mtimeMs'
  | 'icon.childMarkdownRemark.socialCard.name'
  | 'icon.childMarkdownRemark.socialCard.nlink'
  | 'icon.childMarkdownRemark.socialCard.prettySize'
  | 'icon.childMarkdownRemark.socialCard.publicURL'
  | 'icon.childMarkdownRemark.socialCard.rdev'
  | 'icon.childMarkdownRemark.socialCard.relativeDirectory'
  | 'icon.childMarkdownRemark.socialCard.relativePath'
  | 'icon.childMarkdownRemark.socialCard.root'
  | 'icon.childMarkdownRemark.socialCard.size'
  | 'icon.childMarkdownRemark.socialCard.sourceInstanceName'
  | 'icon.childMarkdownRemark.socialCard.uid'
  | 'icon.childMarkdownRemark.tableOfContents'
  | 'icon.childMarkdownRemark.timeToRead'
  | 'icon.childMarkdownRemark.wordCount.paragraphs'
  | 'icon.childMarkdownRemark.wordCount.sentences'
  | 'icon.childMarkdownRemark.wordCount.words'
  | 'icon.childNotificationBarYaml.arrowText'
  | 'icon.childNotificationBarYaml.backgroundColor'
  | 'icon.childNotificationBarYaml.barBody'
  | 'icon.childNotificationBarYaml.children'
  | 'icon.childNotificationBarYaml.children.children'
  | 'icon.childNotificationBarYaml.children.id'
  | 'icon.childNotificationBarYaml.id'
  | 'icon.childNotificationBarYaml.internal.content'
  | 'icon.childNotificationBarYaml.internal.contentDigest'
  | 'icon.childNotificationBarYaml.internal.description'
  | 'icon.childNotificationBarYaml.internal.fieldOwners'
  | 'icon.childNotificationBarYaml.internal.ignoreType'
  | 'icon.childNotificationBarYaml.internal.mediaType'
  | 'icon.childNotificationBarYaml.internal.owner'
  | 'icon.childNotificationBarYaml.internal.type'
  | 'icon.childNotificationBarYaml.openUrlNewTab'
  | 'icon.childNotificationBarYaml.parent.children'
  | 'icon.childNotificationBarYaml.parent.id'
  | 'icon.childNotificationBarYaml.showNotBar'
  | 'icon.childNotificationBarYaml.url'
  | 'icon.childTeamMembersYaml.children'
  | 'icon.childTeamMembersYaml.children.children'
  | 'icon.childTeamMembersYaml.children.id'
  | 'icon.childTeamMembersYaml.id'
  | 'icon.childTeamMembersYaml.internal.content'
  | 'icon.childTeamMembersYaml.internal.contentDigest'
  | 'icon.childTeamMembersYaml.internal.description'
  | 'icon.childTeamMembersYaml.internal.fieldOwners'
  | 'icon.childTeamMembersYaml.internal.ignoreType'
  | 'icon.childTeamMembersYaml.internal.mediaType'
  | 'icon.childTeamMembersYaml.internal.owner'
  | 'icon.childTeamMembersYaml.internal.type'
  | 'icon.childTeamMembersYaml.parent.children'
  | 'icon.childTeamMembersYaml.parent.id'
  | 'icon.childTeamMembersYaml.totalMembers'
  | 'icon.children'
  | 'icon.childrenImageSharp'
  | 'icon.childrenImageSharp.children'
  | 'icon.childrenImageSharp.children.children'
  | 'icon.childrenImageSharp.children.id'
  | 'icon.childrenImageSharp.fixed.aspectRatio'
  | 'icon.childrenImageSharp.fixed.base64'
  | 'icon.childrenImageSharp.fixed.height'
  | 'icon.childrenImageSharp.fixed.originalName'
  | 'icon.childrenImageSharp.fixed.src'
  | 'icon.childrenImageSharp.fixed.srcSet'
  | 'icon.childrenImageSharp.fixed.srcSetWebp'
  | 'icon.childrenImageSharp.fixed.srcWebp'
  | 'icon.childrenImageSharp.fixed.tracedSVG'
  | 'icon.childrenImageSharp.fixed.width'
  | 'icon.childrenImageSharp.fluid.aspectRatio'
  | 'icon.childrenImageSharp.fluid.base64'
  | 'icon.childrenImageSharp.fluid.originalImg'
  | 'icon.childrenImageSharp.fluid.originalName'
  | 'icon.childrenImageSharp.fluid.presentationHeight'
  | 'icon.childrenImageSharp.fluid.presentationWidth'
  | 'icon.childrenImageSharp.fluid.sizes'
  | 'icon.childrenImageSharp.fluid.src'
  | 'icon.childrenImageSharp.fluid.srcSet'
  | 'icon.childrenImageSharp.fluid.srcSetWebp'
  | 'icon.childrenImageSharp.fluid.srcWebp'
  | 'icon.childrenImageSharp.fluid.tracedSVG'
  | 'icon.childrenImageSharp.gatsbyImageData'
  | 'icon.childrenImageSharp.id'
  | 'icon.childrenImageSharp.internal.content'
  | 'icon.childrenImageSharp.internal.contentDigest'
  | 'icon.childrenImageSharp.internal.description'
  | 'icon.childrenImageSharp.internal.fieldOwners'
  | 'icon.childrenImageSharp.internal.ignoreType'
  | 'icon.childrenImageSharp.internal.mediaType'
  | 'icon.childrenImageSharp.internal.owner'
  | 'icon.childrenImageSharp.internal.type'
  | 'icon.childrenImageSharp.original.height'
  | 'icon.childrenImageSharp.original.src'
  | 'icon.childrenImageSharp.original.width'
  | 'icon.childrenImageSharp.parent.children'
  | 'icon.childrenImageSharp.parent.id'
  | 'icon.childrenImageSharp.resize.aspectRatio'
  | 'icon.childrenImageSharp.resize.height'
  | 'icon.childrenImageSharp.resize.originalName'
  | 'icon.childrenImageSharp.resize.src'
  | 'icon.childrenImageSharp.resize.tracedSVG'
  | 'icon.childrenImageSharp.resize.width'
  | 'icon.childrenMarkdownRemark'
  | 'icon.childrenMarkdownRemark.children'
  | 'icon.childrenMarkdownRemark.children.children'
  | 'icon.childrenMarkdownRemark.children.id'
  | 'icon.childrenMarkdownRemark.excerpt'
  | 'icon.childrenMarkdownRemark.excerptAst'
  | 'icon.childrenMarkdownRemark.fields.authors'
  | 'icon.childrenMarkdownRemark.fields.slug'
  | 'icon.childrenMarkdownRemark.fields.socialCardId'
  | 'icon.childrenMarkdownRemark.fileAbsolutePath'
  | 'icon.childrenMarkdownRemark.frontmatter.authors'
  | 'icon.childrenMarkdownRemark.frontmatter.bio'
  | 'icon.childrenMarkdownRemark.frontmatter.blocks'
  | 'icon.childrenMarkdownRemark.frontmatter.bottomLinks'
  | 'icon.childrenMarkdownRemark.frontmatter.category'
  | 'icon.childrenMarkdownRemark.frontmatter.description'
  | 'icon.childrenMarkdownRemark.frontmatter.featured'
  | 'icon.childrenMarkdownRemark.frontmatter.funnel'
  | 'icon.childrenMarkdownRemark.frontmatter.industry'
  | 'icon.childrenMarkdownRemark.frontmatter.invertContent'
  | 'icon.childrenMarkdownRemark.frontmatter.isHidden'
  | 'icon.childrenMarkdownRemark.frontmatter.isPublished'
  | 'icon.childrenMarkdownRemark.frontmatter.name'
  | 'icon.childrenMarkdownRemark.frontmatter.publishDate'
  | 'icon.childrenMarkdownRemark.frontmatter.relatedTitle'
  | 'icon.childrenMarkdownRemark.frontmatter.role'
  | 'icon.childrenMarkdownRemark.frontmatter.tags'
  | 'icon.childrenMarkdownRemark.frontmatter.templateKey'
  | 'icon.childrenMarkdownRemark.frontmatter.title'
  | 'icon.childrenMarkdownRemark.headings'
  | 'icon.childrenMarkdownRemark.headings.depth'
  | 'icon.childrenMarkdownRemark.headings.id'
  | 'icon.childrenMarkdownRemark.headings.value'
  | 'icon.childrenMarkdownRemark.html'
  | 'icon.childrenMarkdownRemark.htmlAst'
  | 'icon.childrenMarkdownRemark.id'
  | 'icon.childrenMarkdownRemark.internal.content'
  | 'icon.childrenMarkdownRemark.internal.contentDigest'
  | 'icon.childrenMarkdownRemark.internal.description'
  | 'icon.childrenMarkdownRemark.internal.fieldOwners'
  | 'icon.childrenMarkdownRemark.internal.ignoreType'
  | 'icon.childrenMarkdownRemark.internal.mediaType'
  | 'icon.childrenMarkdownRemark.internal.owner'
  | 'icon.childrenMarkdownRemark.internal.type'
  | 'icon.childrenMarkdownRemark.parent.children'
  | 'icon.childrenMarkdownRemark.parent.id'
  | 'icon.childrenMarkdownRemark.rawMarkdownBody'
  | 'icon.childrenMarkdownRemark.socialCard.absolutePath'
  | 'icon.childrenMarkdownRemark.socialCard.accessTime'
  | 'icon.childrenMarkdownRemark.socialCard.atime'
  | 'icon.childrenMarkdownRemark.socialCard.atimeMs'
  | 'icon.childrenMarkdownRemark.socialCard.base'
  | 'icon.childrenMarkdownRemark.socialCard.birthTime'
  | 'icon.childrenMarkdownRemark.socialCard.birthtime'
  | 'icon.childrenMarkdownRemark.socialCard.birthtimeMs'
  | 'icon.childrenMarkdownRemark.socialCard.blksize'
  | 'icon.childrenMarkdownRemark.socialCard.blocks'
  | 'icon.childrenMarkdownRemark.socialCard.changeTime'
  | 'icon.childrenMarkdownRemark.socialCard.children'
  | 'icon.childrenMarkdownRemark.socialCard.childrenImageSharp'
  | 'icon.childrenMarkdownRemark.socialCard.childrenMarkdownRemark'
  | 'icon.childrenMarkdownRemark.socialCard.childrenNotificationBarYaml'
  | 'icon.childrenMarkdownRemark.socialCard.childrenTeamMembersYaml'
  | 'icon.childrenMarkdownRemark.socialCard.ctime'
  | 'icon.childrenMarkdownRemark.socialCard.ctimeMs'
  | 'icon.childrenMarkdownRemark.socialCard.dev'
  | 'icon.childrenMarkdownRemark.socialCard.dir'
  | 'icon.childrenMarkdownRemark.socialCard.ext'
  | 'icon.childrenMarkdownRemark.socialCard.extension'
  | 'icon.childrenMarkdownRemark.socialCard.gid'
  | 'icon.childrenMarkdownRemark.socialCard.hash'
  | 'icon.childrenMarkdownRemark.socialCard.id'
  | 'icon.childrenMarkdownRemark.socialCard.ino'
  | 'icon.childrenMarkdownRemark.socialCard.mode'
  | 'icon.childrenMarkdownRemark.socialCard.modifiedTime'
  | 'icon.childrenMarkdownRemark.socialCard.mtime'
  | 'icon.childrenMarkdownRemark.socialCard.mtimeMs'
  | 'icon.childrenMarkdownRemark.socialCard.name'
  | 'icon.childrenMarkdownRemark.socialCard.nlink'
  | 'icon.childrenMarkdownRemark.socialCard.prettySize'
  | 'icon.childrenMarkdownRemark.socialCard.publicURL'
  | 'icon.childrenMarkdownRemark.socialCard.rdev'
  | 'icon.childrenMarkdownRemark.socialCard.relativeDirectory'
  | 'icon.childrenMarkdownRemark.socialCard.relativePath'
  | 'icon.childrenMarkdownRemark.socialCard.root'
  | 'icon.childrenMarkdownRemark.socialCard.size'
  | 'icon.childrenMarkdownRemark.socialCard.sourceInstanceName'
  | 'icon.childrenMarkdownRemark.socialCard.uid'
  | 'icon.childrenMarkdownRemark.tableOfContents'
  | 'icon.childrenMarkdownRemark.timeToRead'
  | 'icon.childrenMarkdownRemark.wordCount.paragraphs'
  | 'icon.childrenMarkdownRemark.wordCount.sentences'
  | 'icon.childrenMarkdownRemark.wordCount.words'
  | 'icon.childrenNotificationBarYaml'
  | 'icon.childrenNotificationBarYaml.arrowText'
  | 'icon.childrenNotificationBarYaml.backgroundColor'
  | 'icon.childrenNotificationBarYaml.barBody'
  | 'icon.childrenNotificationBarYaml.children'
  | 'icon.childrenNotificationBarYaml.children.children'
  | 'icon.childrenNotificationBarYaml.children.id'
  | 'icon.childrenNotificationBarYaml.id'
  | 'icon.childrenNotificationBarYaml.internal.content'
  | 'icon.childrenNotificationBarYaml.internal.contentDigest'
  | 'icon.childrenNotificationBarYaml.internal.description'
  | 'icon.childrenNotificationBarYaml.internal.fieldOwners'
  | 'icon.childrenNotificationBarYaml.internal.ignoreType'
  | 'icon.childrenNotificationBarYaml.internal.mediaType'
  | 'icon.childrenNotificationBarYaml.internal.owner'
  | 'icon.childrenNotificationBarYaml.internal.type'
  | 'icon.childrenNotificationBarYaml.openUrlNewTab'
  | 'icon.childrenNotificationBarYaml.parent.children'
  | 'icon.childrenNotificationBarYaml.parent.id'
  | 'icon.childrenNotificationBarYaml.showNotBar'
  | 'icon.childrenNotificationBarYaml.url'
  | 'icon.childrenTeamMembersYaml'
  | 'icon.childrenTeamMembersYaml.children'
  | 'icon.childrenTeamMembersYaml.children.children'
  | 'icon.childrenTeamMembersYaml.children.id'
  | 'icon.childrenTeamMembersYaml.id'
  | 'icon.childrenTeamMembersYaml.internal.content'
  | 'icon.childrenTeamMembersYaml.internal.contentDigest'
  | 'icon.childrenTeamMembersYaml.internal.description'
  | 'icon.childrenTeamMembersYaml.internal.fieldOwners'
  | 'icon.childrenTeamMembersYaml.internal.ignoreType'
  | 'icon.childrenTeamMembersYaml.internal.mediaType'
  | 'icon.childrenTeamMembersYaml.internal.owner'
  | 'icon.childrenTeamMembersYaml.internal.type'
  | 'icon.childrenTeamMembersYaml.parent.children'
  | 'icon.childrenTeamMembersYaml.parent.id'
  | 'icon.childrenTeamMembersYaml.totalMembers'
  | 'icon.children.children'
  | 'icon.children.children.children'
  | 'icon.children.children.id'
  | 'icon.children.id'
  | 'icon.children.internal.content'
  | 'icon.children.internal.contentDigest'
  | 'icon.children.internal.description'
  | 'icon.children.internal.fieldOwners'
  | 'icon.children.internal.ignoreType'
  | 'icon.children.internal.mediaType'
  | 'icon.children.internal.owner'
  | 'icon.children.internal.type'
  | 'icon.children.parent.children'
  | 'icon.children.parent.id'
  | 'icon.ctime'
  | 'icon.ctimeMs'
  | 'icon.dev'
  | 'icon.dir'
  | 'icon.ext'
  | 'icon.extension'
  | 'icon.gid'
  | 'icon.hash'
  | 'icon.id'
  | 'icon.ino'
  | 'icon.internal.content'
  | 'icon.internal.contentDigest'
  | 'icon.internal.description'
  | 'icon.internal.fieldOwners'
  | 'icon.internal.ignoreType'
  | 'icon.internal.mediaType'
  | 'icon.internal.owner'
  | 'icon.internal.type'
  | 'icon.mode'
  | 'icon.modifiedTime'
  | 'icon.mtime'
  | 'icon.mtimeMs'
  | 'icon.name'
  | 'icon.nlink'
  | 'icon.parent.children'
  | 'icon.parent.children.children'
  | 'icon.parent.children.id'
  | 'icon.parent.id'
  | 'icon.parent.internal.content'
  | 'icon.parent.internal.contentDigest'
  | 'icon.parent.internal.description'
  | 'icon.parent.internal.fieldOwners'
  | 'icon.parent.internal.ignoreType'
  | 'icon.parent.internal.mediaType'
  | 'icon.parent.internal.owner'
  | 'icon.parent.internal.type'
  | 'icon.parent.parent.children'
  | 'icon.parent.parent.id'
  | 'icon.prettySize'
  | 'icon.publicURL'
  | 'icon.rdev'
  | 'icon.relativeDirectory'
  | 'icon.relativePath'
  | 'icon.root'
  | 'icon.size'
  | 'icon.sourceInstanceName'
  | 'icon.uid'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'title';

type ResultsFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly icon: InputMaybe<FileFilterInput>;
  readonly iconAlt: InputMaybe<StringQueryOperatorInput>;
  readonly iconTitle: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type ResultsFilterListInput = {
  readonly elemMatch: InputMaybe<ResultsFilterInput>;
};

type ResultsGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ResultsEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ResultsGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Results>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ResultsGroupConnection_distinctArgs = {
  field: ResultsFieldsEnum;
};


type ResultsGroupConnection_groupArgs = {
  field: ResultsFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ResultsGroupConnection_maxArgs = {
  field: ResultsFieldsEnum;
};


type ResultsGroupConnection_minArgs = {
  field: ResultsFieldsEnum;
};


type ResultsGroupConnection_sumArgs = {
  field: ResultsFieldsEnum;
};

type ResultsSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<ResultsFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly mapping: Maybe<SiteMapping>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id';

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldsEnum;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldsEnum;
};

type SiteBuildMetadataSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldsEnum =
  | 'buildTime'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'graphqlTypegen.typesOutputPath'
  | 'host'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'jsxRuntime'
  | 'mapping.MarkdownRemark_fields_author'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pathPrefix'
  | 'polyfill'
  | 'port'
  | 'siteMetadata.description'
  | 'siteMetadata.image'
  | 'siteMetadata.siteUrl'
  | 'siteMetadata.title'
  | 'trailingSlash';

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly mapping: InputMaybe<SiteMappingFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldsEnum =
  | 'absoluteCompiledFilePath'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'functionRoute'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'originalAbsoluteFilePath'
  | 'originalRelativeFilePath'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginName'
  | 'relativeCompiledFilePath';

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldsEnum;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldsEnum;
};

type SiteFunctionSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteGraphqlTypegen = {
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldsEnum;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldsEnum;
};

type SiteMapping = {
  readonly MarkdownRemark_fields_author: Maybe<Scalars['String']>;
};

type SiteMappingFilterInput = {
  readonly MarkdownRemark_fields_author: InputMaybe<StringQueryOperatorInput>;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly context: Maybe<SitePageContext>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageContext = {
  readonly noIndex: Maybe<Scalars['Boolean']>;
};

type SitePageContextFilterInput = {
  readonly noIndex: InputMaybe<BooleanQueryOperatorInput>;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'component'
  | 'componentChunkName'
  | 'context.noIndex'
  | 'id'
  | 'internalComponentName'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'matchPath'
  | 'pageContext'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'path'
  | 'pluginCreator.browserAPIs'
  | 'pluginCreator.children'
  | 'pluginCreator.children.children'
  | 'pluginCreator.children.children.children'
  | 'pluginCreator.children.children.id'
  | 'pluginCreator.children.id'
  | 'pluginCreator.children.internal.content'
  | 'pluginCreator.children.internal.contentDigest'
  | 'pluginCreator.children.internal.description'
  | 'pluginCreator.children.internal.fieldOwners'
  | 'pluginCreator.children.internal.ignoreType'
  | 'pluginCreator.children.internal.mediaType'
  | 'pluginCreator.children.internal.owner'
  | 'pluginCreator.children.internal.type'
  | 'pluginCreator.children.parent.children'
  | 'pluginCreator.children.parent.id'
  | 'pluginCreator.id'
  | 'pluginCreator.internal.content'
  | 'pluginCreator.internal.contentDigest'
  | 'pluginCreator.internal.description'
  | 'pluginCreator.internal.fieldOwners'
  | 'pluginCreator.internal.ignoreType'
  | 'pluginCreator.internal.mediaType'
  | 'pluginCreator.internal.owner'
  | 'pluginCreator.internal.type'
  | 'pluginCreator.name'
  | 'pluginCreator.nodeAPIs'
  | 'pluginCreator.packageJson'
  | 'pluginCreator.parent.children'
  | 'pluginCreator.parent.children.children'
  | 'pluginCreator.parent.children.id'
  | 'pluginCreator.parent.id'
  | 'pluginCreator.parent.internal.content'
  | 'pluginCreator.parent.internal.contentDigest'
  | 'pluginCreator.parent.internal.description'
  | 'pluginCreator.parent.internal.fieldOwners'
  | 'pluginCreator.parent.internal.ignoreType'
  | 'pluginCreator.parent.internal.mediaType'
  | 'pluginCreator.parent.internal.owner'
  | 'pluginCreator.parent.internal.type'
  | 'pluginCreator.parent.parent.children'
  | 'pluginCreator.parent.parent.id'
  | 'pluginCreator.pluginFilepath'
  | 'pluginCreator.pluginOptions'
  | 'pluginCreator.resolve'
  | 'pluginCreator.ssrAPIs'
  | 'pluginCreator.version';

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly context: InputMaybe<SitePageContextFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldsEnum;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldsEnum;
};

type SitePageSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePageFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldsEnum =
  | 'browserAPIs'
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'name'
  | 'nodeAPIs'
  | 'packageJson'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'pluginFilepath'
  | 'pluginOptions'
  | 'resolve'
  | 'ssrAPIs'
  | 'version';

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldsEnum;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldsEnum;
};

type SitePluginSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SitePluginFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<SiteFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type Summary = {
  readonly overviewSection: Maybe<MarkdownRemarkFrontmatterSummaryOverviewSection>;
  readonly results: Maybe<ReadonlyArray<Maybe<Results>>>;
};

type SummaryFilterInput = {
  readonly overviewSection: InputMaybe<MarkdownRemarkFrontmatterSummaryOverviewSectionFilterInput>;
  readonly results: InputMaybe<ResultsFilterListInput>;
};

type TeamMembersYaml = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly totalMembers: Maybe<Scalars['Int']>;
};

type TeamMembersYamlConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TeamMembersYamlEdge>;
  readonly group: ReadonlyArray<TeamMembersYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TeamMembersYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TeamMembersYamlConnection_distinctArgs = {
  field: TeamMembersYamlFieldsEnum;
};


type TeamMembersYamlConnection_groupArgs = {
  field: TeamMembersYamlFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TeamMembersYamlConnection_maxArgs = {
  field: TeamMembersYamlFieldsEnum;
};


type TeamMembersYamlConnection_minArgs = {
  field: TeamMembersYamlFieldsEnum;
};


type TeamMembersYamlConnection_sumArgs = {
  field: TeamMembersYamlFieldsEnum;
};

type TeamMembersYamlEdge = {
  readonly next: Maybe<TeamMembersYaml>;
  readonly node: TeamMembersYaml;
  readonly previous: Maybe<TeamMembersYaml>;
};

type TeamMembersYamlFieldsEnum =
  | 'children'
  | 'children.children'
  | 'children.children.children'
  | 'children.children.children.children'
  | 'children.children.children.id'
  | 'children.children.id'
  | 'children.children.internal.content'
  | 'children.children.internal.contentDigest'
  | 'children.children.internal.description'
  | 'children.children.internal.fieldOwners'
  | 'children.children.internal.ignoreType'
  | 'children.children.internal.mediaType'
  | 'children.children.internal.owner'
  | 'children.children.internal.type'
  | 'children.children.parent.children'
  | 'children.children.parent.id'
  | 'children.id'
  | 'children.internal.content'
  | 'children.internal.contentDigest'
  | 'children.internal.description'
  | 'children.internal.fieldOwners'
  | 'children.internal.ignoreType'
  | 'children.internal.mediaType'
  | 'children.internal.owner'
  | 'children.internal.type'
  | 'children.parent.children'
  | 'children.parent.children.children'
  | 'children.parent.children.id'
  | 'children.parent.id'
  | 'children.parent.internal.content'
  | 'children.parent.internal.contentDigest'
  | 'children.parent.internal.description'
  | 'children.parent.internal.fieldOwners'
  | 'children.parent.internal.ignoreType'
  | 'children.parent.internal.mediaType'
  | 'children.parent.internal.owner'
  | 'children.parent.internal.type'
  | 'children.parent.parent.children'
  | 'children.parent.parent.id'
  | 'id'
  | 'internal.content'
  | 'internal.contentDigest'
  | 'internal.description'
  | 'internal.fieldOwners'
  | 'internal.ignoreType'
  | 'internal.mediaType'
  | 'internal.owner'
  | 'internal.type'
  | 'parent.children'
  | 'parent.children.children'
  | 'parent.children.children.children'
  | 'parent.children.children.id'
  | 'parent.children.id'
  | 'parent.children.internal.content'
  | 'parent.children.internal.contentDigest'
  | 'parent.children.internal.description'
  | 'parent.children.internal.fieldOwners'
  | 'parent.children.internal.ignoreType'
  | 'parent.children.internal.mediaType'
  | 'parent.children.internal.owner'
  | 'parent.children.internal.type'
  | 'parent.children.parent.children'
  | 'parent.children.parent.id'
  | 'parent.id'
  | 'parent.internal.content'
  | 'parent.internal.contentDigest'
  | 'parent.internal.description'
  | 'parent.internal.fieldOwners'
  | 'parent.internal.ignoreType'
  | 'parent.internal.mediaType'
  | 'parent.internal.owner'
  | 'parent.internal.type'
  | 'parent.parent.children'
  | 'parent.parent.children.children'
  | 'parent.parent.children.id'
  | 'parent.parent.id'
  | 'parent.parent.internal.content'
  | 'parent.parent.internal.contentDigest'
  | 'parent.parent.internal.description'
  | 'parent.parent.internal.fieldOwners'
  | 'parent.parent.internal.ignoreType'
  | 'parent.parent.internal.mediaType'
  | 'parent.parent.internal.owner'
  | 'parent.parent.internal.type'
  | 'parent.parent.parent.children'
  | 'parent.parent.parent.id'
  | 'totalMembers';

type TeamMembersYamlFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly totalMembers: InputMaybe<IntQueryOperatorInput>;
};

type TeamMembersYamlFilterListInput = {
  readonly elemMatch: InputMaybe<TeamMembersYamlFilterInput>;
};

type TeamMembersYamlGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<TeamMembersYamlEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<TeamMembersYamlGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<TeamMembersYaml>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type TeamMembersYamlGroupConnection_distinctArgs = {
  field: TeamMembersYamlFieldsEnum;
};


type TeamMembersYamlGroupConnection_groupArgs = {
  field: TeamMembersYamlFieldsEnum;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type TeamMembersYamlGroupConnection_maxArgs = {
  field: TeamMembersYamlFieldsEnum;
};


type TeamMembersYamlGroupConnection_minArgs = {
  field: TeamMembersYamlFieldsEnum;
};


type TeamMembersYamlGroupConnection_sumArgs = {
  field: TeamMembersYamlFieldsEnum;
};

type TeamMembersYamlSortInput = {
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<TeamMembersYamlFieldsEnum>>>;
  readonly order: InputMaybe<ReadonlyArray<InputMaybe<SortOrderEnum>>>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type BlogQueryVariables = Exact<{
  skip: Scalars['Int'];
  limit: Scalars['Int'];
}>;


type BlogQuery = { readonly posts: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly featured: boolean | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> }, readonly featuredPosts: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly featured: boolean | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> }, readonly tags: { readonly group: ReadonlyArray<{ readonly tag: string | null }> } };

type BlogAuthorQueryVariables = Exact<{
  skip: Scalars['Int'];
  limit: Scalars['Int'];
  author: InputMaybe<Scalars['String']>;
}>;


type BlogAuthorQuery = { readonly posts: { readonly group: ReadonlyArray<{ readonly tag: string | null }>, readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly featured: boolean | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> }, readonly authorData: { readonly frontmatter: { readonly bio: string | null, readonly role: string | null, readonly photo: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null };

type BlogAuthorTagQueryVariables = Exact<{
  skip: Scalars['Int'];
  limit: Scalars['Int'];
  author: InputMaybe<Scalars['String']>;
  tag: InputMaybe<Scalars['String']>;
}>;


type BlogAuthorTagQuery = { readonly allTags: { readonly group: ReadonlyArray<{ readonly tag: string | null }> }, readonly posts: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly featured: boolean | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> }, readonly authorData: { readonly frontmatter: { readonly bio: string | null, readonly role: string | null, readonly photo: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null };

type BlogTagQueryVariables = Exact<{
  skip: Scalars['Int'];
  limit: Scalars['Int'];
  tag: InputMaybe<Scalars['String']>;
}>;


type BlogTagQuery = { readonly allMarkdownRemark: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly featured: boolean | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> } };

type CaseStudiesQueryVariables = Exact<{
  skip: Scalars['Int'];
  limit: Scalars['Int'];
}>;


type CaseStudiesQuery = { readonly caseStudies: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly url: string | null } | null } | null, readonly socialCard: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } }> } };

type CaseStudyContentQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type CaseStudyContentQuery = { readonly markdownRemark: { readonly id: string, readonly html: string | null, readonly frontmatter: { readonly metadata: { readonly title: string | null, readonly description: string | null, readonly url: string | null } | null, readonly header: { readonly subLabel: string | null, readonly subTitle: string | null, readonly content: string | null, readonly pdf: { readonly publicURL: string | null } | null } | null, readonly summary: { readonly results: ReadonlyArray<{ readonly iconAlt: string | null, readonly iconTitle: string | null, readonly title: string | null, readonly content: string | null, readonly icon: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null, readonly overviewSection: { readonly description: string | null, readonly bullets: ReadonlyArray<{ readonly value: string | null, readonly description: string | null } | null> | null } | null } | null, readonly footer: { readonly ctaTitle: string | null, readonly ctaSubtitle: string | null } | null } | null, readonly socialCard: { readonly publicURL: string | null } | null } | null };

type CaseStudyDataFragment = { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly url: string | null } | null } | null, readonly socialCard: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } }> };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type LongFormContentQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type LongFormContentQuery = { readonly markdownRemark: { readonly id: string, readonly html: string | null, readonly fields: { readonly slug: string | null, readonly authors: ReadonlyArray<{ readonly frontmatter: { readonly title: string | null, readonly role: string | null, readonly photo: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null> | null } | null, readonly frontmatter: { readonly title: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly featured: boolean | null, readonly publishDate: string | null, readonly isHidden: boolean | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly url: string | null, readonly image: { readonly publicURL: string | null } | null, readonly socialImage: { readonly publicURL: string | null } | null } | null, readonly heroImage: { readonly imageAlt: string | null, readonly imageTitle: string | null, readonly image: { readonly publicURL: string | null, readonly extension: string, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null, readonly customCTA: { readonly title: string | null, readonly description: string | null, readonly ctaText: string | null, readonly ctaUrl: string | null, readonly openCtaNewTab: boolean | null } | null } | null } | null };

type NotificationQueryQueryVariables = Exact<{ [key: string]: never; }>;


type NotificationQueryQuery = { readonly notificationBarYaml: { readonly arrowText: string | null, readonly barBody: string | null, readonly showNotBar: boolean | null, readonly url: string | null, readonly backgroundColor: string | null } | null };

type PostDataFragment = { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly featured: boolean | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> };

type RelatedArticlesQueryVariables = Exact<{ [key: string]: never; }>;


type RelatedArticlesQuery = { readonly allMarkdownRemark: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly tags: ReadonlyArray<string | null> | null, readonly featured: boolean | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> } };

type RelatedUseCasesQueryVariables = Exact<{ [key: string]: never; }>;


type RelatedUseCasesQuery = { readonly allMarkdownRemark: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly funnel: ReadonlyArray<string | null> | null, readonly category: ReadonlyArray<string | null> | null, readonly industry: ReadonlyArray<string | null> | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> } };

type SITE_METADATA_QUERYQueryVariables = Exact<{ [key: string]: never; }>;


type SITE_METADATA_QUERYQuery = { readonly site: { readonly siteMetadata: { readonly title: string | null, readonly description: string | null, readonly siteUrl: string | null, readonly image: string | null } | null } | null };

type StaticPageContentQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type StaticPageContentQuery = { readonly markdownRemark: { readonly id: string, readonly frontmatter: { readonly invertContent: boolean, readonly relatedTitle: string, readonly tags: ReadonlyArray<string | null> | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly url: string | null, readonly image: { readonly publicURL: string | null } | null } | null, readonly hero: { readonly title: string | null, readonly description: string | null, readonly ctaText: string | null, readonly ctaHref: string | null, readonly openCtaNewTab: boolean | null } | null, readonly cardSection: { readonly title: string | null, readonly subtitle: string | null, readonly cards: ReadonlyArray<{ readonly iconAlt: string | null, readonly iconTitle: string | null, readonly title: string | null, readonly content: string | null, readonly icon: { readonly extension: string, readonly publicURL: string | null, readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null } | null, readonly blocks: ReadonlyArray<{ readonly content: string | null, readonly subheader: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly isImageAfterText: boolean | null, readonly ctaText: string | null, readonly ctaUrl: string | null, readonly isCtaButton: boolean | null, readonly image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null> | null, readonly inlineCta: { readonly title: string | null, readonly subtitle: string | null, readonly buttonText: string | null, readonly buttonHref: string | null } | null } | null } | null };

type TeamMembersQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TeamMembersQueryQuery = { readonly teamMembers: { readonly totalMembers: number | null } | null };

type UseCaseQueryVariables = Exact<{ [key: string]: never; }>;


type UseCaseQuery = { readonly useCases: { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly funnel: ReadonlyArray<string | null> | null, readonly category: ReadonlyArray<string | null> | null, readonly industry: ReadonlyArray<string | null> | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> }, readonly funnel: { readonly group: ReadonlyArray<{ readonly tag: string | null }> }, readonly category: { readonly group: ReadonlyArray<{ readonly tag: string | null }> }, readonly industry: { readonly group: ReadonlyArray<{ readonly tag: string | null }> } };

type UseCaseContentQueryVariables = Exact<{
  id: Scalars['String'];
}>;


type UseCaseContentQuery = { readonly markdownRemark: { readonly id: string, readonly html: string | null, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly description: string | null, readonly publishDate: string | null, readonly funnel: ReadonlyArray<string | null> | null, readonly category: ReadonlyArray<string | null> | null, readonly industry: ReadonlyArray<string | null> | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly url: string | null, readonly image: { readonly publicURL: string | null } | null, readonly socialImage: { readonly publicURL: string | null } | null } | null, readonly useCaseCode: { readonly iframeUrl: string | null, readonly shareUrl: string | null, readonly docsUrl: string | null } | null, readonly bottomLinks: ReadonlyArray<{ readonly text: string | null, readonly url: string | null } | null> | null } | null } | null };

type UseCaseDataFragment = { readonly edges: ReadonlyArray<{ readonly node: { readonly id: string, readonly fields: { readonly slug: string | null } | null, readonly frontmatter: { readonly title: string | null, readonly publishDate: string | null, readonly funnel: ReadonlyArray<string | null> | null, readonly category: ReadonlyArray<string | null> | null, readonly industry: ReadonlyArray<string | null> | null, readonly metadata: { readonly title: string | null, readonly description: string | null, readonly imageAlt: string | null, readonly imageTitle: string | null, readonly url: string | null, readonly image: { readonly childImageSharp: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData } | null } | null } | null } | null } }> };


}
